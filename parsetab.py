
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA DIVIDE FUNC ID IF LPAREN MINUS NUMBER PLUS RPAREN THEN TIMES VARprogram : declaration_listdeclaration_list : declaration\n                        | declaration_list declarationdeclaration : varDeclaration\n                   | statementstatement : expressionvarDeclaration : VAR IDvarDeclaration : VAR ID ASSIGN expressionexpression : ID ASSIGN expressionexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMBERfactor : IDfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'VAR':([0,2,3,4,5,7,8,9,10,11,13,14,22,23,24,25,26,27,28,29,],[6,6,-2,-4,-5,-17,-6,-12,-15,-16,-3,-7,-9,-10,-17,-11,-13,-14,-18,-8,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,],[7,7,-2,-4,-5,14,-17,-6,-12,-15,-16,7,-3,-7,7,24,24,24,24,7,-9,-10,-17,-11,-13,-14,-18,-8,]),'NUMBER':([0,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,],[11,11,-2,-4,-5,-17,-6,-12,-15,-16,11,-3,-7,11,11,11,11,11,11,-9,-10,-17,-11,-13,-14,-18,-8,]),'LPAREN':([0,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,],[12,12,-2,-4,-5,-17,-6,-12,-15,-16,12,-3,-7,12,12,12,12,12,12,-9,-10,-17,-11,-13,-14,-18,-8,]),'$end':([1,2,3,4,5,7,8,9,10,11,13,14,22,23,24,25,26,27,28,29,],[0,-1,-2,-4,-5,-17,-6,-12,-15,-16,-3,-7,-9,-10,-17,-11,-13,-14,-18,-8,]),'ASSIGN':([7,14,],[15,21,]),'TIMES':([7,9,10,11,23,24,25,26,27,28,],[-17,18,-15,-16,18,-17,18,-13,-14,-18,]),'DIVIDE':([7,9,10,11,23,24,25,26,27,28,],[-17,19,-15,-16,19,-17,19,-13,-14,-18,]),'PLUS':([7,8,9,10,11,20,22,23,24,25,26,27,28,29,],[-17,16,-12,-15,-16,16,16,-10,-17,-11,-13,-14,-18,16,]),'MINUS':([7,8,9,10,11,20,22,23,24,25,26,27,28,29,],[-17,17,-12,-15,-16,17,17,-10,-17,-11,-13,-14,-18,17,]),'RPAREN':([7,9,10,11,20,22,23,24,25,26,27,28,],[-17,-12,-15,-16,28,-9,-10,-17,-11,-13,-14,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,13,]),'varDeclaration':([0,2,],[4,4,]),'statement':([0,2,],[5,5,]),'expression':([0,2,12,15,21,],[8,8,20,22,29,]),'term':([0,2,12,15,16,17,21,],[9,9,9,9,23,25,9,]),'factor':([0,2,12,15,16,17,18,19,21,],[10,10,10,10,10,10,26,27,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','Parser.py',6),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Parser.py',11),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','Parser.py',18),
  ('declaration -> statement','declaration',1,'p_declaration','Parser.py',19),
  ('statement -> expression','statement',1,'p_statement','Parser.py',23),
  ('varDeclaration -> VAR ID','varDeclaration',2,'p_varDeclaration_uninitialized','Parser.py',26),
  ('varDeclaration -> VAR ID ASSIGN expression','varDeclaration',4,'p_varDeclaration_initialized','Parser.py',30),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assign','Parser.py',34),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','Parser.py',38),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','Parser.py',42),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',46),
  ('term -> term TIMES factor','term',3,'p_term_times','Parser.py',50),
  ('term -> term DIVIDE factor','term',3,'p_term_div','Parser.py',54),
  ('term -> factor','term',1,'p_term_factor','Parser.py',58),
  ('factor -> NUMBER','factor',1,'p_factor_num','Parser.py',62),
  ('factor -> ID','factor',1,'p_factor_var','Parser.py',66),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser.py',70),
]
