
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA DIVIDE FUNC ID IF LPAREN MINUS NUMBER PLUS RPAREN THEN TIMES VARdeclaration : statement\n                   | varDeclarationstatement : expressionvarDeclaration : VAR IDvarDeclaration : VAR assignassign : ID ASSIGN expressionexpression : ID ASSIGN expressionexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMBERfactor : IDfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'VAR':([0,],[5,]),'ID':([0,5,10,11,12,15,16,17,22,],[6,13,6,20,20,6,20,20,6,]),'NUMBER':([0,10,11,12,15,16,17,22,],[9,9,9,9,9,9,9,9,]),'LPAREN':([0,10,11,12,15,16,17,22,],[10,10,10,10,10,10,10,10,]),'$end':([1,2,3,4,6,7,8,9,13,14,19,20,21,23,24,25,26,27,],[0,-1,-2,-3,-15,-10,-13,-14,-4,-5,-8,-15,-9,-7,-11,-12,-16,-6,]),'PLUS':([4,6,7,8,9,18,19,20,21,23,24,25,26,27,],[11,-15,-10,-13,-14,11,-8,-15,-9,11,-11,-12,-16,11,]),'MINUS':([4,6,7,8,9,18,19,20,21,23,24,25,26,27,],[12,-15,-10,-13,-14,12,-8,-15,-9,12,-11,-12,-16,12,]),'ASSIGN':([6,13,],[15,22,]),'TIMES':([6,7,8,9,19,20,21,24,25,26,],[-15,16,-13,-14,16,-15,16,-11,-12,-16,]),'DIVIDE':([6,7,8,9,19,20,21,24,25,26,],[-15,17,-13,-14,17,-15,17,-11,-12,-16,]),'RPAREN':([6,7,8,9,18,19,20,21,23,24,25,26,],[-15,-10,-13,-14,26,-8,-15,-9,-7,-11,-12,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([0,],[1,]),'statement':([0,],[2,]),'varDeclaration':([0,],[3,]),'expression':([0,10,15,22,],[4,18,23,27,]),'term':([0,10,11,12,15,22,],[7,7,19,21,7,7,]),'factor':([0,10,11,12,15,16,17,22,],[8,8,8,8,8,24,25,8,]),'assign':([5,],[14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaration","S'",1,None,None,None),
  ('declaration -> statement','declaration',1,'p_declaration','Parser.py',5),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','Parser.py',6),
  ('statement -> expression','statement',1,'p_statement','Parser.py',10),
  ('varDeclaration -> VAR ID','varDeclaration',2,'p_varDeclaration_uninitialized','Parser.py',14),
  ('varDeclaration -> VAR assign','varDeclaration',2,'p_varDeclaration_initialized','Parser.py',17),
  ('assign -> ID ASSIGN expression','assign',3,'p_assign','Parser.py',20),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assign','Parser.py',24),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','Parser.py',28),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','Parser.py',32),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',36),
  ('term -> term TIMES factor','term',3,'p_term_times','Parser.py',40),
  ('term -> term DIVIDE factor','term',3,'p_term_div','Parser.py',44),
  ('term -> factor','term',1,'p_term_factor','Parser.py',48),
  ('factor -> NUMBER','factor',1,'p_factor_num','Parser.py',52),
  ('factor -> ID','factor',1,'p_factor_var','Parser.py',56),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','Parser.py',60),
]
