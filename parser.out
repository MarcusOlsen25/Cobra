Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration
Rule 3     declaration_list -> declaration_list declaration
Rule 4     declaration -> varDeclaration
Rule 5     declaration -> statement
Rule 6     declaration -> funcDeclaration
Rule 7     statement -> expression
Rule 8     statement -> ifStatement
Rule 9     statement -> whileStatement
Rule 10    statement -> printStatement
Rule 11    ifStatement -> IF expression THEN LBRACE declaration_list RBRACE
Rule 12    ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
Rule 13    whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE
Rule 14    printStatement -> PRINT expression
Rule 15    varDeclaration -> VAR ID
Rule 16    varDeclaration -> VAR ID ASSIGN expression
Rule 17    expression -> assignment
Rule 18    assignment -> ID ASSIGN assignment
Rule 19    assignment -> logical
Rule 20    logical -> logical OR equality
Rule 21    logical -> logical AND equality
Rule 22    logical -> equality
Rule 23    equality -> equality EQUALS comparison
Rule 24    equality -> equality NOTEQUALS comparison
Rule 25    equality -> comparison
Rule 26    comparison -> comparison GREATER term
Rule 27    comparison -> comparison LESS term
Rule 28    comparison -> comparison GREATEROREQUAL term
Rule 29    comparison -> comparison LESSOREQUAL term
Rule 30    comparison -> term
Rule 31    term -> term PLUS factor
Rule 32    term -> term MINUS factor
Rule 33    term -> factor
Rule 34    factor -> factor TIMES unary
Rule 35    factor -> factor DIVIDE unary
Rule 36    factor -> unary
Rule 37    unary -> NOT unary
Rule 38    unary -> MINUS unary
Rule 39    unary -> call
Rule 40    call -> primary LPAREN arguments RPAREN
Rule 41    call -> primary
Rule 42    primary -> NUMBER
Rule 43    primary -> ID
Rule 44    primary -> LPAREN expression RPAREN
Rule 45    arguments -> arguments COMMA expression
Rule 46    arguments -> expression
Rule 47    arguments -> <empty>
Rule 48    funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
Rule 49    parameter_list -> parameter_list COMMA ID
Rule 50    parameter_list -> ID
Rule 51    parameter_list -> <empty>

Terminals, with rules where they appear

AND                  : 21
ASSIGN               : 16 18
COMMA                : 45 49
DIVIDE               : 35
ELSE                 : 12
EQUALS               : 23
FUNC                 : 48
GREATER              : 26
GREATEROREQUAL       : 28
ID                   : 15 16 18 43 48 49 50
IF                   : 11 12
LBRACE               : 11 12 12 13 48
LESS                 : 27
LESSOREQUAL          : 29
LPAREN               : 40 44 48
MINUS                : 32 38
NOT                  : 37
NOTEQUALS            : 24
NUMBER               : 42
OR                   : 20
PLUS                 : 31
PRINT                : 14
RBRACE               : 11 12 12 13 48
RETURN               : 
RPAREN               : 40 44 48
THEN                 : 11 12 13
TIMES                : 34
VAR                  : 15 16
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

arguments            : 40 45
assignment           : 17 18
call                 : 39
comparison           : 23 24 25 26 27 28 29
declaration          : 2 3
declaration_list     : 1 3 11 12 12 13 48
equality             : 20 21 22 23 24
expression           : 7 11 12 13 14 16 44 45 46
factor               : 31 32 33 34 35
funcDeclaration      : 6
ifStatement          : 8
logical              : 19 20 21
parameter_list       : 48 49
primary              : 40 41
printStatement       : 10
program              : 0
statement            : 5
term                 : 26 27 28 29 30 31 32
unary                : 34 35 36 37 38
varDeclaration       : 4
whileStatement       : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    program                        shift and go to state 1
    declaration_list               shift and go to state 2
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    expression                     shift and go to state 9
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_list .
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (program -> declaration_list .)
    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    declaration                    shift and go to state 30
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    expression                     shift and go to state 9
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 3

    (2) declaration_list -> declaration .

    VAR             reduce using rule 2 (declaration_list -> declaration .)
    FUNC            reduce using rule 2 (declaration_list -> declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration .)
    PRINT           reduce using rule 2 (declaration_list -> declaration .)
    ID              reduce using rule 2 (declaration_list -> declaration .)
    NOT             reduce using rule 2 (declaration_list -> declaration .)
    MINUS           reduce using rule 2 (declaration_list -> declaration .)
    NUMBER          reduce using rule 2 (declaration_list -> declaration .)
    LPAREN          reduce using rule 2 (declaration_list -> declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration .)
    RBRACE          reduce using rule 2 (declaration_list -> declaration .)


state 4

    (4) declaration -> varDeclaration .

    VAR             reduce using rule 4 (declaration -> varDeclaration .)
    FUNC            reduce using rule 4 (declaration -> varDeclaration .)
    IF              reduce using rule 4 (declaration -> varDeclaration .)
    WHILE           reduce using rule 4 (declaration -> varDeclaration .)
    PRINT           reduce using rule 4 (declaration -> varDeclaration .)
    ID              reduce using rule 4 (declaration -> varDeclaration .)
    NOT             reduce using rule 4 (declaration -> varDeclaration .)
    MINUS           reduce using rule 4 (declaration -> varDeclaration .)
    NUMBER          reduce using rule 4 (declaration -> varDeclaration .)
    LPAREN          reduce using rule 4 (declaration -> varDeclaration .)
    $end            reduce using rule 4 (declaration -> varDeclaration .)
    RBRACE          reduce using rule 4 (declaration -> varDeclaration .)


state 5

    (5) declaration -> statement .

    VAR             reduce using rule 5 (declaration -> statement .)
    FUNC            reduce using rule 5 (declaration -> statement .)
    IF              reduce using rule 5 (declaration -> statement .)
    WHILE           reduce using rule 5 (declaration -> statement .)
    PRINT           reduce using rule 5 (declaration -> statement .)
    ID              reduce using rule 5 (declaration -> statement .)
    NOT             reduce using rule 5 (declaration -> statement .)
    MINUS           reduce using rule 5 (declaration -> statement .)
    NUMBER          reduce using rule 5 (declaration -> statement .)
    LPAREN          reduce using rule 5 (declaration -> statement .)
    $end            reduce using rule 5 (declaration -> statement .)
    RBRACE          reduce using rule 5 (declaration -> statement .)


state 6

    (6) declaration -> funcDeclaration .

    VAR             reduce using rule 6 (declaration -> funcDeclaration .)
    FUNC            reduce using rule 6 (declaration -> funcDeclaration .)
    IF              reduce using rule 6 (declaration -> funcDeclaration .)
    WHILE           reduce using rule 6 (declaration -> funcDeclaration .)
    PRINT           reduce using rule 6 (declaration -> funcDeclaration .)
    ID              reduce using rule 6 (declaration -> funcDeclaration .)
    NOT             reduce using rule 6 (declaration -> funcDeclaration .)
    MINUS           reduce using rule 6 (declaration -> funcDeclaration .)
    NUMBER          reduce using rule 6 (declaration -> funcDeclaration .)
    LPAREN          reduce using rule 6 (declaration -> funcDeclaration .)
    $end            reduce using rule 6 (declaration -> funcDeclaration .)
    RBRACE          reduce using rule 6 (declaration -> funcDeclaration .)


state 7

    (15) varDeclaration -> VAR . ID
    (16) varDeclaration -> VAR . ID ASSIGN expression

    ID              shift and go to state 31


state 8

    (18) assignment -> ID . ASSIGN assignment
    (43) primary -> ID .

    ASSIGN          shift and go to state 32
    LPAREN          reduce using rule 43 (primary -> ID .)
    TIMES           reduce using rule 43 (primary -> ID .)
    DIVIDE          reduce using rule 43 (primary -> ID .)
    PLUS            reduce using rule 43 (primary -> ID .)
    MINUS           reduce using rule 43 (primary -> ID .)
    GREATER         reduce using rule 43 (primary -> ID .)
    LESS            reduce using rule 43 (primary -> ID .)
    GREATEROREQUAL  reduce using rule 43 (primary -> ID .)
    LESSOREQUAL     reduce using rule 43 (primary -> ID .)
    EQUALS          reduce using rule 43 (primary -> ID .)
    NOTEQUALS       reduce using rule 43 (primary -> ID .)
    OR              reduce using rule 43 (primary -> ID .)
    AND             reduce using rule 43 (primary -> ID .)
    VAR             reduce using rule 43 (primary -> ID .)
    FUNC            reduce using rule 43 (primary -> ID .)
    IF              reduce using rule 43 (primary -> ID .)
    WHILE           reduce using rule 43 (primary -> ID .)
    PRINT           reduce using rule 43 (primary -> ID .)
    ID              reduce using rule 43 (primary -> ID .)
    NOT             reduce using rule 43 (primary -> ID .)
    NUMBER          reduce using rule 43 (primary -> ID .)
    $end            reduce using rule 43 (primary -> ID .)
    RPAREN          reduce using rule 43 (primary -> ID .)
    THEN            reduce using rule 43 (primary -> ID .)
    RBRACE          reduce using rule 43 (primary -> ID .)
    COMMA           reduce using rule 43 (primary -> ID .)


state 9

    (7) statement -> expression .

    VAR             reduce using rule 7 (statement -> expression .)
    FUNC            reduce using rule 7 (statement -> expression .)
    IF              reduce using rule 7 (statement -> expression .)
    WHILE           reduce using rule 7 (statement -> expression .)
    PRINT           reduce using rule 7 (statement -> expression .)
    ID              reduce using rule 7 (statement -> expression .)
    NOT             reduce using rule 7 (statement -> expression .)
    MINUS           reduce using rule 7 (statement -> expression .)
    NUMBER          reduce using rule 7 (statement -> expression .)
    LPAREN          reduce using rule 7 (statement -> expression .)
    $end            reduce using rule 7 (statement -> expression .)
    RBRACE          reduce using rule 7 (statement -> expression .)


state 10

    (8) statement -> ifStatement .

    VAR             reduce using rule 8 (statement -> ifStatement .)
    FUNC            reduce using rule 8 (statement -> ifStatement .)
    IF              reduce using rule 8 (statement -> ifStatement .)
    WHILE           reduce using rule 8 (statement -> ifStatement .)
    PRINT           reduce using rule 8 (statement -> ifStatement .)
    ID              reduce using rule 8 (statement -> ifStatement .)
    NOT             reduce using rule 8 (statement -> ifStatement .)
    MINUS           reduce using rule 8 (statement -> ifStatement .)
    NUMBER          reduce using rule 8 (statement -> ifStatement .)
    LPAREN          reduce using rule 8 (statement -> ifStatement .)
    $end            reduce using rule 8 (statement -> ifStatement .)
    RBRACE          reduce using rule 8 (statement -> ifStatement .)


state 11

    (9) statement -> whileStatement .

    VAR             reduce using rule 9 (statement -> whileStatement .)
    FUNC            reduce using rule 9 (statement -> whileStatement .)
    IF              reduce using rule 9 (statement -> whileStatement .)
    WHILE           reduce using rule 9 (statement -> whileStatement .)
    PRINT           reduce using rule 9 (statement -> whileStatement .)
    ID              reduce using rule 9 (statement -> whileStatement .)
    NOT             reduce using rule 9 (statement -> whileStatement .)
    MINUS           reduce using rule 9 (statement -> whileStatement .)
    NUMBER          reduce using rule 9 (statement -> whileStatement .)
    LPAREN          reduce using rule 9 (statement -> whileStatement .)
    $end            reduce using rule 9 (statement -> whileStatement .)
    RBRACE          reduce using rule 9 (statement -> whileStatement .)


state 12

    (10) statement -> printStatement .

    VAR             reduce using rule 10 (statement -> printStatement .)
    FUNC            reduce using rule 10 (statement -> printStatement .)
    IF              reduce using rule 10 (statement -> printStatement .)
    WHILE           reduce using rule 10 (statement -> printStatement .)
    PRINT           reduce using rule 10 (statement -> printStatement .)
    ID              reduce using rule 10 (statement -> printStatement .)
    NOT             reduce using rule 10 (statement -> printStatement .)
    MINUS           reduce using rule 10 (statement -> printStatement .)
    NUMBER          reduce using rule 10 (statement -> printStatement .)
    LPAREN          reduce using rule 10 (statement -> printStatement .)
    $end            reduce using rule 10 (statement -> printStatement .)
    RBRACE          reduce using rule 10 (statement -> printStatement .)


state 13

    (48) funcDeclaration -> FUNC . ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE

    ID              shift and go to state 33


state 14

    (44) primary -> LPAREN . expression RPAREN
    (17) expression -> . assignment
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 34
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 15

    (17) expression -> assignment .

    VAR             reduce using rule 17 (expression -> assignment .)
    FUNC            reduce using rule 17 (expression -> assignment .)
    IF              reduce using rule 17 (expression -> assignment .)
    WHILE           reduce using rule 17 (expression -> assignment .)
    PRINT           reduce using rule 17 (expression -> assignment .)
    ID              reduce using rule 17 (expression -> assignment .)
    NOT             reduce using rule 17 (expression -> assignment .)
    MINUS           reduce using rule 17 (expression -> assignment .)
    NUMBER          reduce using rule 17 (expression -> assignment .)
    LPAREN          reduce using rule 17 (expression -> assignment .)
    $end            reduce using rule 17 (expression -> assignment .)
    RPAREN          reduce using rule 17 (expression -> assignment .)
    THEN            reduce using rule 17 (expression -> assignment .)
    RBRACE          reduce using rule 17 (expression -> assignment .)
    COMMA           reduce using rule 17 (expression -> assignment .)


state 16

    (11) ifStatement -> IF . expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> IF . expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 35
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 17

    (13) whileStatement -> WHILE . expression THEN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 36
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 18

    (14) printStatement -> PRINT . expression
    (17) expression -> . assignment
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 37
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 19

    (19) assignment -> logical .
    (20) logical -> logical . OR equality
    (21) logical -> logical . AND equality

    VAR             reduce using rule 19 (assignment -> logical .)
    FUNC            reduce using rule 19 (assignment -> logical .)
    IF              reduce using rule 19 (assignment -> logical .)
    WHILE           reduce using rule 19 (assignment -> logical .)
    PRINT           reduce using rule 19 (assignment -> logical .)
    ID              reduce using rule 19 (assignment -> logical .)
    NOT             reduce using rule 19 (assignment -> logical .)
    MINUS           reduce using rule 19 (assignment -> logical .)
    NUMBER          reduce using rule 19 (assignment -> logical .)
    LPAREN          reduce using rule 19 (assignment -> logical .)
    $end            reduce using rule 19 (assignment -> logical .)
    RPAREN          reduce using rule 19 (assignment -> logical .)
    THEN            reduce using rule 19 (assignment -> logical .)
    RBRACE          reduce using rule 19 (assignment -> logical .)
    COMMA           reduce using rule 19 (assignment -> logical .)
    OR              shift and go to state 38
    AND             shift and go to state 39


state 20

    (22) logical -> equality .
    (23) equality -> equality . EQUALS comparison
    (24) equality -> equality . NOTEQUALS comparison

    OR              reduce using rule 22 (logical -> equality .)
    AND             reduce using rule 22 (logical -> equality .)
    VAR             reduce using rule 22 (logical -> equality .)
    FUNC            reduce using rule 22 (logical -> equality .)
    IF              reduce using rule 22 (logical -> equality .)
    WHILE           reduce using rule 22 (logical -> equality .)
    PRINT           reduce using rule 22 (logical -> equality .)
    ID              reduce using rule 22 (logical -> equality .)
    NOT             reduce using rule 22 (logical -> equality .)
    MINUS           reduce using rule 22 (logical -> equality .)
    NUMBER          reduce using rule 22 (logical -> equality .)
    LPAREN          reduce using rule 22 (logical -> equality .)
    $end            reduce using rule 22 (logical -> equality .)
    RPAREN          reduce using rule 22 (logical -> equality .)
    THEN            reduce using rule 22 (logical -> equality .)
    RBRACE          reduce using rule 22 (logical -> equality .)
    COMMA           reduce using rule 22 (logical -> equality .)
    EQUALS          shift and go to state 40
    NOTEQUALS       shift and go to state 41


state 21

    (25) equality -> comparison .
    (26) comparison -> comparison . GREATER term
    (27) comparison -> comparison . LESS term
    (28) comparison -> comparison . GREATEROREQUAL term
    (29) comparison -> comparison . LESSOREQUAL term

    EQUALS          reduce using rule 25 (equality -> comparison .)
    NOTEQUALS       reduce using rule 25 (equality -> comparison .)
    OR              reduce using rule 25 (equality -> comparison .)
    AND             reduce using rule 25 (equality -> comparison .)
    VAR             reduce using rule 25 (equality -> comparison .)
    FUNC            reduce using rule 25 (equality -> comparison .)
    IF              reduce using rule 25 (equality -> comparison .)
    WHILE           reduce using rule 25 (equality -> comparison .)
    PRINT           reduce using rule 25 (equality -> comparison .)
    ID              reduce using rule 25 (equality -> comparison .)
    NOT             reduce using rule 25 (equality -> comparison .)
    MINUS           reduce using rule 25 (equality -> comparison .)
    NUMBER          reduce using rule 25 (equality -> comparison .)
    LPAREN          reduce using rule 25 (equality -> comparison .)
    $end            reduce using rule 25 (equality -> comparison .)
    RPAREN          reduce using rule 25 (equality -> comparison .)
    THEN            reduce using rule 25 (equality -> comparison .)
    RBRACE          reduce using rule 25 (equality -> comparison .)
    COMMA           reduce using rule 25 (equality -> comparison .)
    GREATER         shift and go to state 42
    LESS            shift and go to state 43
    GREATEROREQUAL  shift and go to state 44
    LESSOREQUAL     shift and go to state 45


state 22

    (30) comparison -> term .
    (31) term -> term . PLUS factor
    (32) term -> term . MINUS factor

  ! shift/reduce conflict for MINUS resolved as shift
    GREATER         reduce using rule 30 (comparison -> term .)
    LESS            reduce using rule 30 (comparison -> term .)
    GREATEROREQUAL  reduce using rule 30 (comparison -> term .)
    LESSOREQUAL     reduce using rule 30 (comparison -> term .)
    EQUALS          reduce using rule 30 (comparison -> term .)
    NOTEQUALS       reduce using rule 30 (comparison -> term .)
    OR              reduce using rule 30 (comparison -> term .)
    AND             reduce using rule 30 (comparison -> term .)
    VAR             reduce using rule 30 (comparison -> term .)
    FUNC            reduce using rule 30 (comparison -> term .)
    IF              reduce using rule 30 (comparison -> term .)
    WHILE           reduce using rule 30 (comparison -> term .)
    PRINT           reduce using rule 30 (comparison -> term .)
    ID              reduce using rule 30 (comparison -> term .)
    NOT             reduce using rule 30 (comparison -> term .)
    NUMBER          reduce using rule 30 (comparison -> term .)
    LPAREN          reduce using rule 30 (comparison -> term .)
    $end            reduce using rule 30 (comparison -> term .)
    RPAREN          reduce using rule 30 (comparison -> term .)
    THEN            reduce using rule 30 (comparison -> term .)
    RBRACE          reduce using rule 30 (comparison -> term .)
    COMMA           reduce using rule 30 (comparison -> term .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47

  ! MINUS           [ reduce using rule 30 (comparison -> term .) ]


state 23

    (33) term -> factor .
    (34) factor -> factor . TIMES unary
    (35) factor -> factor . DIVIDE unary

    PLUS            reduce using rule 33 (term -> factor .)
    MINUS           reduce using rule 33 (term -> factor .)
    GREATER         reduce using rule 33 (term -> factor .)
    LESS            reduce using rule 33 (term -> factor .)
    GREATEROREQUAL  reduce using rule 33 (term -> factor .)
    LESSOREQUAL     reduce using rule 33 (term -> factor .)
    EQUALS          reduce using rule 33 (term -> factor .)
    NOTEQUALS       reduce using rule 33 (term -> factor .)
    OR              reduce using rule 33 (term -> factor .)
    AND             reduce using rule 33 (term -> factor .)
    VAR             reduce using rule 33 (term -> factor .)
    FUNC            reduce using rule 33 (term -> factor .)
    IF              reduce using rule 33 (term -> factor .)
    WHILE           reduce using rule 33 (term -> factor .)
    PRINT           reduce using rule 33 (term -> factor .)
    ID              reduce using rule 33 (term -> factor .)
    NOT             reduce using rule 33 (term -> factor .)
    NUMBER          reduce using rule 33 (term -> factor .)
    LPAREN          reduce using rule 33 (term -> factor .)
    $end            reduce using rule 33 (term -> factor .)
    RPAREN          reduce using rule 33 (term -> factor .)
    THEN            reduce using rule 33 (term -> factor .)
    RBRACE          reduce using rule 33 (term -> factor .)
    COMMA           reduce using rule 33 (term -> factor .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 24

    (38) unary -> MINUS . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    unary                          shift and go to state 50
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 25

    (36) factor -> unary .

    TIMES           reduce using rule 36 (factor -> unary .)
    DIVIDE          reduce using rule 36 (factor -> unary .)
    PLUS            reduce using rule 36 (factor -> unary .)
    MINUS           reduce using rule 36 (factor -> unary .)
    GREATER         reduce using rule 36 (factor -> unary .)
    LESS            reduce using rule 36 (factor -> unary .)
    GREATEROREQUAL  reduce using rule 36 (factor -> unary .)
    LESSOREQUAL     reduce using rule 36 (factor -> unary .)
    EQUALS          reduce using rule 36 (factor -> unary .)
    NOTEQUALS       reduce using rule 36 (factor -> unary .)
    OR              reduce using rule 36 (factor -> unary .)
    AND             reduce using rule 36 (factor -> unary .)
    VAR             reduce using rule 36 (factor -> unary .)
    FUNC            reduce using rule 36 (factor -> unary .)
    IF              reduce using rule 36 (factor -> unary .)
    WHILE           reduce using rule 36 (factor -> unary .)
    PRINT           reduce using rule 36 (factor -> unary .)
    ID              reduce using rule 36 (factor -> unary .)
    NOT             reduce using rule 36 (factor -> unary .)
    NUMBER          reduce using rule 36 (factor -> unary .)
    LPAREN          reduce using rule 36 (factor -> unary .)
    $end            reduce using rule 36 (factor -> unary .)
    RPAREN          reduce using rule 36 (factor -> unary .)
    THEN            reduce using rule 36 (factor -> unary .)
    RBRACE          reduce using rule 36 (factor -> unary .)
    COMMA           reduce using rule 36 (factor -> unary .)


state 26

    (37) unary -> NOT . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    unary                          shift and go to state 52
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 27

    (39) unary -> call .

    TIMES           reduce using rule 39 (unary -> call .)
    DIVIDE          reduce using rule 39 (unary -> call .)
    PLUS            reduce using rule 39 (unary -> call .)
    MINUS           reduce using rule 39 (unary -> call .)
    GREATER         reduce using rule 39 (unary -> call .)
    LESS            reduce using rule 39 (unary -> call .)
    GREATEROREQUAL  reduce using rule 39 (unary -> call .)
    LESSOREQUAL     reduce using rule 39 (unary -> call .)
    EQUALS          reduce using rule 39 (unary -> call .)
    NOTEQUALS       reduce using rule 39 (unary -> call .)
    OR              reduce using rule 39 (unary -> call .)
    AND             reduce using rule 39 (unary -> call .)
    VAR             reduce using rule 39 (unary -> call .)
    FUNC            reduce using rule 39 (unary -> call .)
    IF              reduce using rule 39 (unary -> call .)
    WHILE           reduce using rule 39 (unary -> call .)
    PRINT           reduce using rule 39 (unary -> call .)
    ID              reduce using rule 39 (unary -> call .)
    NOT             reduce using rule 39 (unary -> call .)
    NUMBER          reduce using rule 39 (unary -> call .)
    LPAREN          reduce using rule 39 (unary -> call .)
    $end            reduce using rule 39 (unary -> call .)
    RPAREN          reduce using rule 39 (unary -> call .)
    THEN            reduce using rule 39 (unary -> call .)
    RBRACE          reduce using rule 39 (unary -> call .)
    COMMA           reduce using rule 39 (unary -> call .)


state 28

    (40) call -> primary . LPAREN arguments RPAREN
    (41) call -> primary .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 53
    TIMES           reduce using rule 41 (call -> primary .)
    DIVIDE          reduce using rule 41 (call -> primary .)
    PLUS            reduce using rule 41 (call -> primary .)
    MINUS           reduce using rule 41 (call -> primary .)
    GREATER         reduce using rule 41 (call -> primary .)
    LESS            reduce using rule 41 (call -> primary .)
    GREATEROREQUAL  reduce using rule 41 (call -> primary .)
    LESSOREQUAL     reduce using rule 41 (call -> primary .)
    EQUALS          reduce using rule 41 (call -> primary .)
    NOTEQUALS       reduce using rule 41 (call -> primary .)
    OR              reduce using rule 41 (call -> primary .)
    AND             reduce using rule 41 (call -> primary .)
    VAR             reduce using rule 41 (call -> primary .)
    FUNC            reduce using rule 41 (call -> primary .)
    IF              reduce using rule 41 (call -> primary .)
    WHILE           reduce using rule 41 (call -> primary .)
    PRINT           reduce using rule 41 (call -> primary .)
    ID              reduce using rule 41 (call -> primary .)
    NOT             reduce using rule 41 (call -> primary .)
    NUMBER          reduce using rule 41 (call -> primary .)
    $end            reduce using rule 41 (call -> primary .)
    RPAREN          reduce using rule 41 (call -> primary .)
    THEN            reduce using rule 41 (call -> primary .)
    RBRACE          reduce using rule 41 (call -> primary .)
    COMMA           reduce using rule 41 (call -> primary .)

  ! LPAREN          [ reduce using rule 41 (call -> primary .) ]


state 29

    (42) primary -> NUMBER .

    LPAREN          reduce using rule 42 (primary -> NUMBER .)
    TIMES           reduce using rule 42 (primary -> NUMBER .)
    DIVIDE          reduce using rule 42 (primary -> NUMBER .)
    PLUS            reduce using rule 42 (primary -> NUMBER .)
    MINUS           reduce using rule 42 (primary -> NUMBER .)
    GREATER         reduce using rule 42 (primary -> NUMBER .)
    LESS            reduce using rule 42 (primary -> NUMBER .)
    GREATEROREQUAL  reduce using rule 42 (primary -> NUMBER .)
    LESSOREQUAL     reduce using rule 42 (primary -> NUMBER .)
    EQUALS          reduce using rule 42 (primary -> NUMBER .)
    NOTEQUALS       reduce using rule 42 (primary -> NUMBER .)
    OR              reduce using rule 42 (primary -> NUMBER .)
    AND             reduce using rule 42 (primary -> NUMBER .)
    VAR             reduce using rule 42 (primary -> NUMBER .)
    FUNC            reduce using rule 42 (primary -> NUMBER .)
    IF              reduce using rule 42 (primary -> NUMBER .)
    WHILE           reduce using rule 42 (primary -> NUMBER .)
    PRINT           reduce using rule 42 (primary -> NUMBER .)
    ID              reduce using rule 42 (primary -> NUMBER .)
    NOT             reduce using rule 42 (primary -> NUMBER .)
    NUMBER          reduce using rule 42 (primary -> NUMBER .)
    $end            reduce using rule 42 (primary -> NUMBER .)
    RPAREN          reduce using rule 42 (primary -> NUMBER .)
    THEN            reduce using rule 42 (primary -> NUMBER .)
    RBRACE          reduce using rule 42 (primary -> NUMBER .)
    COMMA           reduce using rule 42 (primary -> NUMBER .)


state 30

    (3) declaration_list -> declaration_list declaration .

    VAR             reduce using rule 3 (declaration_list -> declaration_list declaration .)
    FUNC            reduce using rule 3 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration_list declaration .)
    PRINT           reduce using rule 3 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 3 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 3 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 3 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 3 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 3 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 3 (declaration_list -> declaration_list declaration .)


state 31

    (15) varDeclaration -> VAR ID .
    (16) varDeclaration -> VAR ID . ASSIGN expression

    VAR             reduce using rule 15 (varDeclaration -> VAR ID .)
    FUNC            reduce using rule 15 (varDeclaration -> VAR ID .)
    IF              reduce using rule 15 (varDeclaration -> VAR ID .)
    WHILE           reduce using rule 15 (varDeclaration -> VAR ID .)
    PRINT           reduce using rule 15 (varDeclaration -> VAR ID .)
    ID              reduce using rule 15 (varDeclaration -> VAR ID .)
    NOT             reduce using rule 15 (varDeclaration -> VAR ID .)
    MINUS           reduce using rule 15 (varDeclaration -> VAR ID .)
    NUMBER          reduce using rule 15 (varDeclaration -> VAR ID .)
    LPAREN          reduce using rule 15 (varDeclaration -> VAR ID .)
    $end            reduce using rule 15 (varDeclaration -> VAR ID .)
    RBRACE          reduce using rule 15 (varDeclaration -> VAR ID .)
    ASSIGN          shift and go to state 54


state 32

    (18) assignment -> ID ASSIGN . assignment
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    assignment                     shift and go to state 55
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 33

    (48) funcDeclaration -> FUNC ID . LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE

    LPAREN          shift and go to state 56


state 34

    (44) primary -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 57


state 35

    (11) ifStatement -> IF expression . THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> IF expression . THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE

    THEN            shift and go to state 58


state 36

    (13) whileStatement -> WHILE expression . THEN LBRACE declaration_list RBRACE

    THEN            shift and go to state 59


state 37

    (14) printStatement -> PRINT expression .

    VAR             reduce using rule 14 (printStatement -> PRINT expression .)
    FUNC            reduce using rule 14 (printStatement -> PRINT expression .)
    IF              reduce using rule 14 (printStatement -> PRINT expression .)
    WHILE           reduce using rule 14 (printStatement -> PRINT expression .)
    PRINT           reduce using rule 14 (printStatement -> PRINT expression .)
    ID              reduce using rule 14 (printStatement -> PRINT expression .)
    NOT             reduce using rule 14 (printStatement -> PRINT expression .)
    MINUS           reduce using rule 14 (printStatement -> PRINT expression .)
    NUMBER          reduce using rule 14 (printStatement -> PRINT expression .)
    LPAREN          reduce using rule 14 (printStatement -> PRINT expression .)
    $end            reduce using rule 14 (printStatement -> PRINT expression .)
    RBRACE          reduce using rule 14 (printStatement -> PRINT expression .)


state 38

    (20) logical -> logical OR . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    equality                       shift and go to state 60
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 39

    (21) logical -> logical AND . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    equality                       shift and go to state 61
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 40

    (23) equality -> equality EQUALS . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    comparison                     shift and go to state 62
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 41

    (24) equality -> equality NOTEQUALS . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    comparison                     shift and go to state 63
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 42

    (26) comparison -> comparison GREATER . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    term                           shift and go to state 64
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 43

    (27) comparison -> comparison LESS . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    term                           shift and go to state 65
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 44

    (28) comparison -> comparison GREATEROREQUAL . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    term                           shift and go to state 66
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 45

    (29) comparison -> comparison LESSOREQUAL . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    term                           shift and go to state 67
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 46

    (31) term -> term PLUS . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    factor                         shift and go to state 68
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 47

    (32) term -> term MINUS . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    factor                         shift and go to state 69
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 48

    (34) factor -> factor TIMES . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    unary                          shift and go to state 70
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 49

    (35) factor -> factor DIVIDE . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    ID              shift and go to state 51
    LPAREN          shift and go to state 14

    unary                          shift and go to state 71
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 50

    (38) unary -> MINUS unary .

    TIMES           reduce using rule 38 (unary -> MINUS unary .)
    DIVIDE          reduce using rule 38 (unary -> MINUS unary .)
    PLUS            reduce using rule 38 (unary -> MINUS unary .)
    MINUS           reduce using rule 38 (unary -> MINUS unary .)
    GREATER         reduce using rule 38 (unary -> MINUS unary .)
    LESS            reduce using rule 38 (unary -> MINUS unary .)
    GREATEROREQUAL  reduce using rule 38 (unary -> MINUS unary .)
    LESSOREQUAL     reduce using rule 38 (unary -> MINUS unary .)
    EQUALS          reduce using rule 38 (unary -> MINUS unary .)
    NOTEQUALS       reduce using rule 38 (unary -> MINUS unary .)
    OR              reduce using rule 38 (unary -> MINUS unary .)
    AND             reduce using rule 38 (unary -> MINUS unary .)
    VAR             reduce using rule 38 (unary -> MINUS unary .)
    FUNC            reduce using rule 38 (unary -> MINUS unary .)
    IF              reduce using rule 38 (unary -> MINUS unary .)
    WHILE           reduce using rule 38 (unary -> MINUS unary .)
    PRINT           reduce using rule 38 (unary -> MINUS unary .)
    ID              reduce using rule 38 (unary -> MINUS unary .)
    NOT             reduce using rule 38 (unary -> MINUS unary .)
    NUMBER          reduce using rule 38 (unary -> MINUS unary .)
    LPAREN          reduce using rule 38 (unary -> MINUS unary .)
    $end            reduce using rule 38 (unary -> MINUS unary .)
    RPAREN          reduce using rule 38 (unary -> MINUS unary .)
    THEN            reduce using rule 38 (unary -> MINUS unary .)
    RBRACE          reduce using rule 38 (unary -> MINUS unary .)
    COMMA           reduce using rule 38 (unary -> MINUS unary .)


state 51

    (43) primary -> ID .

    LPAREN          reduce using rule 43 (primary -> ID .)
    TIMES           reduce using rule 43 (primary -> ID .)
    DIVIDE          reduce using rule 43 (primary -> ID .)
    PLUS            reduce using rule 43 (primary -> ID .)
    MINUS           reduce using rule 43 (primary -> ID .)
    GREATER         reduce using rule 43 (primary -> ID .)
    LESS            reduce using rule 43 (primary -> ID .)
    GREATEROREQUAL  reduce using rule 43 (primary -> ID .)
    LESSOREQUAL     reduce using rule 43 (primary -> ID .)
    EQUALS          reduce using rule 43 (primary -> ID .)
    NOTEQUALS       reduce using rule 43 (primary -> ID .)
    OR              reduce using rule 43 (primary -> ID .)
    AND             reduce using rule 43 (primary -> ID .)
    VAR             reduce using rule 43 (primary -> ID .)
    FUNC            reduce using rule 43 (primary -> ID .)
    IF              reduce using rule 43 (primary -> ID .)
    WHILE           reduce using rule 43 (primary -> ID .)
    PRINT           reduce using rule 43 (primary -> ID .)
    ID              reduce using rule 43 (primary -> ID .)
    NOT             reduce using rule 43 (primary -> ID .)
    NUMBER          reduce using rule 43 (primary -> ID .)
    $end            reduce using rule 43 (primary -> ID .)
    RPAREN          reduce using rule 43 (primary -> ID .)
    THEN            reduce using rule 43 (primary -> ID .)
    RBRACE          reduce using rule 43 (primary -> ID .)
    COMMA           reduce using rule 43 (primary -> ID .)


state 52

    (37) unary -> NOT unary .

    TIMES           reduce using rule 37 (unary -> NOT unary .)
    DIVIDE          reduce using rule 37 (unary -> NOT unary .)
    PLUS            reduce using rule 37 (unary -> NOT unary .)
    MINUS           reduce using rule 37 (unary -> NOT unary .)
    GREATER         reduce using rule 37 (unary -> NOT unary .)
    LESS            reduce using rule 37 (unary -> NOT unary .)
    GREATEROREQUAL  reduce using rule 37 (unary -> NOT unary .)
    LESSOREQUAL     reduce using rule 37 (unary -> NOT unary .)
    EQUALS          reduce using rule 37 (unary -> NOT unary .)
    NOTEQUALS       reduce using rule 37 (unary -> NOT unary .)
    OR              reduce using rule 37 (unary -> NOT unary .)
    AND             reduce using rule 37 (unary -> NOT unary .)
    VAR             reduce using rule 37 (unary -> NOT unary .)
    FUNC            reduce using rule 37 (unary -> NOT unary .)
    IF              reduce using rule 37 (unary -> NOT unary .)
    WHILE           reduce using rule 37 (unary -> NOT unary .)
    PRINT           reduce using rule 37 (unary -> NOT unary .)
    ID              reduce using rule 37 (unary -> NOT unary .)
    NOT             reduce using rule 37 (unary -> NOT unary .)
    NUMBER          reduce using rule 37 (unary -> NOT unary .)
    LPAREN          reduce using rule 37 (unary -> NOT unary .)
    $end            reduce using rule 37 (unary -> NOT unary .)
    RPAREN          reduce using rule 37 (unary -> NOT unary .)
    THEN            reduce using rule 37 (unary -> NOT unary .)
    RBRACE          reduce using rule 37 (unary -> NOT unary .)
    COMMA           reduce using rule 37 (unary -> NOT unary .)


state 53

    (40) call -> primary LPAREN . arguments RPAREN
    (45) arguments -> . arguments COMMA expression
    (46) arguments -> . expression
    (47) arguments -> .
    (17) expression -> . assignment
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 47 (arguments -> .)
    COMMA           reduce using rule 47 (arguments -> .)
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    primary                        shift and go to state 28
    arguments                      shift and go to state 72
    expression                     shift and go to state 73
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27

state 54

    (16) varDeclaration -> VAR ID ASSIGN . expression
    (17) expression -> . assignment
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 74
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 55

    (18) assignment -> ID ASSIGN assignment .

    VAR             reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    FUNC            reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    IF              reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    WHILE           reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    PRINT           reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    ID              reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    NOT             reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    MINUS           reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    NUMBER          reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    LPAREN          reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    $end            reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    RPAREN          reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    THEN            reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    RBRACE          reduce using rule 18 (assignment -> ID ASSIGN assignment .)
    COMMA           reduce using rule 18 (assignment -> ID ASSIGN assignment .)


state 56

    (48) funcDeclaration -> FUNC ID LPAREN . parameter_list RPAREN LBRACE declaration_list RBRACE
    (49) parameter_list -> . parameter_list COMMA ID
    (50) parameter_list -> . ID
    (51) parameter_list -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 51 (parameter_list -> .)
    COMMA           reduce using rule 51 (parameter_list -> .)

    parameter_list                 shift and go to state 76

state 57

    (44) primary -> LPAREN expression RPAREN .

    LPAREN          reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    LESS            reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    GREATEROREQUAL  reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    LESSOREQUAL     reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    OR              reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    AND             reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    VAR             reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    IF              reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    ID              reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    NOT             reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    $end            reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    THEN            reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 44 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 44 (primary -> LPAREN expression RPAREN .)


state 58

    (11) ifStatement -> IF expression THEN . LBRACE declaration_list RBRACE
    (12) ifStatement -> IF expression THEN . LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 77


state 59

    (13) whileStatement -> WHILE expression THEN . LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 78


state 60

    (20) logical -> logical OR equality .
    (23) equality -> equality . EQUALS comparison
    (24) equality -> equality . NOTEQUALS comparison

    OR              reduce using rule 20 (logical -> logical OR equality .)
    AND             reduce using rule 20 (logical -> logical OR equality .)
    VAR             reduce using rule 20 (logical -> logical OR equality .)
    FUNC            reduce using rule 20 (logical -> logical OR equality .)
    IF              reduce using rule 20 (logical -> logical OR equality .)
    WHILE           reduce using rule 20 (logical -> logical OR equality .)
    PRINT           reduce using rule 20 (logical -> logical OR equality .)
    ID              reduce using rule 20 (logical -> logical OR equality .)
    NOT             reduce using rule 20 (logical -> logical OR equality .)
    MINUS           reduce using rule 20 (logical -> logical OR equality .)
    NUMBER          reduce using rule 20 (logical -> logical OR equality .)
    LPAREN          reduce using rule 20 (logical -> logical OR equality .)
    $end            reduce using rule 20 (logical -> logical OR equality .)
    RPAREN          reduce using rule 20 (logical -> logical OR equality .)
    THEN            reduce using rule 20 (logical -> logical OR equality .)
    RBRACE          reduce using rule 20 (logical -> logical OR equality .)
    COMMA           reduce using rule 20 (logical -> logical OR equality .)
    EQUALS          shift and go to state 40
    NOTEQUALS       shift and go to state 41


state 61

    (21) logical -> logical AND equality .
    (23) equality -> equality . EQUALS comparison
    (24) equality -> equality . NOTEQUALS comparison

    OR              reduce using rule 21 (logical -> logical AND equality .)
    AND             reduce using rule 21 (logical -> logical AND equality .)
    VAR             reduce using rule 21 (logical -> logical AND equality .)
    FUNC            reduce using rule 21 (logical -> logical AND equality .)
    IF              reduce using rule 21 (logical -> logical AND equality .)
    WHILE           reduce using rule 21 (logical -> logical AND equality .)
    PRINT           reduce using rule 21 (logical -> logical AND equality .)
    ID              reduce using rule 21 (logical -> logical AND equality .)
    NOT             reduce using rule 21 (logical -> logical AND equality .)
    MINUS           reduce using rule 21 (logical -> logical AND equality .)
    NUMBER          reduce using rule 21 (logical -> logical AND equality .)
    LPAREN          reduce using rule 21 (logical -> logical AND equality .)
    $end            reduce using rule 21 (logical -> logical AND equality .)
    RPAREN          reduce using rule 21 (logical -> logical AND equality .)
    THEN            reduce using rule 21 (logical -> logical AND equality .)
    RBRACE          reduce using rule 21 (logical -> logical AND equality .)
    COMMA           reduce using rule 21 (logical -> logical AND equality .)
    EQUALS          shift and go to state 40
    NOTEQUALS       shift and go to state 41


state 62

    (23) equality -> equality EQUALS comparison .
    (26) comparison -> comparison . GREATER term
    (27) comparison -> comparison . LESS term
    (28) comparison -> comparison . GREATEROREQUAL term
    (29) comparison -> comparison . LESSOREQUAL term

    EQUALS          reduce using rule 23 (equality -> equality EQUALS comparison .)
    NOTEQUALS       reduce using rule 23 (equality -> equality EQUALS comparison .)
    OR              reduce using rule 23 (equality -> equality EQUALS comparison .)
    AND             reduce using rule 23 (equality -> equality EQUALS comparison .)
    VAR             reduce using rule 23 (equality -> equality EQUALS comparison .)
    FUNC            reduce using rule 23 (equality -> equality EQUALS comparison .)
    IF              reduce using rule 23 (equality -> equality EQUALS comparison .)
    WHILE           reduce using rule 23 (equality -> equality EQUALS comparison .)
    PRINT           reduce using rule 23 (equality -> equality EQUALS comparison .)
    ID              reduce using rule 23 (equality -> equality EQUALS comparison .)
    NOT             reduce using rule 23 (equality -> equality EQUALS comparison .)
    MINUS           reduce using rule 23 (equality -> equality EQUALS comparison .)
    NUMBER          reduce using rule 23 (equality -> equality EQUALS comparison .)
    LPAREN          reduce using rule 23 (equality -> equality EQUALS comparison .)
    $end            reduce using rule 23 (equality -> equality EQUALS comparison .)
    RPAREN          reduce using rule 23 (equality -> equality EQUALS comparison .)
    THEN            reduce using rule 23 (equality -> equality EQUALS comparison .)
    RBRACE          reduce using rule 23 (equality -> equality EQUALS comparison .)
    COMMA           reduce using rule 23 (equality -> equality EQUALS comparison .)
    GREATER         shift and go to state 42
    LESS            shift and go to state 43
    GREATEROREQUAL  shift and go to state 44
    LESSOREQUAL     shift and go to state 45


state 63

    (24) equality -> equality NOTEQUALS comparison .
    (26) comparison -> comparison . GREATER term
    (27) comparison -> comparison . LESS term
    (28) comparison -> comparison . GREATEROREQUAL term
    (29) comparison -> comparison . LESSOREQUAL term

    EQUALS          reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    NOTEQUALS       reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    OR              reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    AND             reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    VAR             reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    FUNC            reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    IF              reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    WHILE           reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    PRINT           reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    ID              reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    NOT             reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    MINUS           reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    NUMBER          reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    LPAREN          reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    $end            reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    RPAREN          reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    THEN            reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    RBRACE          reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    COMMA           reduce using rule 24 (equality -> equality NOTEQUALS comparison .)
    GREATER         shift and go to state 42
    LESS            shift and go to state 43
    GREATEROREQUAL  shift and go to state 44
    LESSOREQUAL     shift and go to state 45


state 64

    (26) comparison -> comparison GREATER term .
    (31) term -> term . PLUS factor
    (32) term -> term . MINUS factor

  ! shift/reduce conflict for MINUS resolved as shift
    GREATER         reduce using rule 26 (comparison -> comparison GREATER term .)
    LESS            reduce using rule 26 (comparison -> comparison GREATER term .)
    GREATEROREQUAL  reduce using rule 26 (comparison -> comparison GREATER term .)
    LESSOREQUAL     reduce using rule 26 (comparison -> comparison GREATER term .)
    EQUALS          reduce using rule 26 (comparison -> comparison GREATER term .)
    NOTEQUALS       reduce using rule 26 (comparison -> comparison GREATER term .)
    OR              reduce using rule 26 (comparison -> comparison GREATER term .)
    AND             reduce using rule 26 (comparison -> comparison GREATER term .)
    VAR             reduce using rule 26 (comparison -> comparison GREATER term .)
    FUNC            reduce using rule 26 (comparison -> comparison GREATER term .)
    IF              reduce using rule 26 (comparison -> comparison GREATER term .)
    WHILE           reduce using rule 26 (comparison -> comparison GREATER term .)
    PRINT           reduce using rule 26 (comparison -> comparison GREATER term .)
    ID              reduce using rule 26 (comparison -> comparison GREATER term .)
    NOT             reduce using rule 26 (comparison -> comparison GREATER term .)
    NUMBER          reduce using rule 26 (comparison -> comparison GREATER term .)
    LPAREN          reduce using rule 26 (comparison -> comparison GREATER term .)
    $end            reduce using rule 26 (comparison -> comparison GREATER term .)
    RPAREN          reduce using rule 26 (comparison -> comparison GREATER term .)
    THEN            reduce using rule 26 (comparison -> comparison GREATER term .)
    RBRACE          reduce using rule 26 (comparison -> comparison GREATER term .)
    COMMA           reduce using rule 26 (comparison -> comparison GREATER term .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47

  ! MINUS           [ reduce using rule 26 (comparison -> comparison GREATER term .) ]


state 65

    (27) comparison -> comparison LESS term .
    (31) term -> term . PLUS factor
    (32) term -> term . MINUS factor

  ! shift/reduce conflict for MINUS resolved as shift
    GREATER         reduce using rule 27 (comparison -> comparison LESS term .)
    LESS            reduce using rule 27 (comparison -> comparison LESS term .)
    GREATEROREQUAL  reduce using rule 27 (comparison -> comparison LESS term .)
    LESSOREQUAL     reduce using rule 27 (comparison -> comparison LESS term .)
    EQUALS          reduce using rule 27 (comparison -> comparison LESS term .)
    NOTEQUALS       reduce using rule 27 (comparison -> comparison LESS term .)
    OR              reduce using rule 27 (comparison -> comparison LESS term .)
    AND             reduce using rule 27 (comparison -> comparison LESS term .)
    VAR             reduce using rule 27 (comparison -> comparison LESS term .)
    FUNC            reduce using rule 27 (comparison -> comparison LESS term .)
    IF              reduce using rule 27 (comparison -> comparison LESS term .)
    WHILE           reduce using rule 27 (comparison -> comparison LESS term .)
    PRINT           reduce using rule 27 (comparison -> comparison LESS term .)
    ID              reduce using rule 27 (comparison -> comparison LESS term .)
    NOT             reduce using rule 27 (comparison -> comparison LESS term .)
    NUMBER          reduce using rule 27 (comparison -> comparison LESS term .)
    LPAREN          reduce using rule 27 (comparison -> comparison LESS term .)
    $end            reduce using rule 27 (comparison -> comparison LESS term .)
    RPAREN          reduce using rule 27 (comparison -> comparison LESS term .)
    THEN            reduce using rule 27 (comparison -> comparison LESS term .)
    RBRACE          reduce using rule 27 (comparison -> comparison LESS term .)
    COMMA           reduce using rule 27 (comparison -> comparison LESS term .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47

  ! MINUS           [ reduce using rule 27 (comparison -> comparison LESS term .) ]


state 66

    (28) comparison -> comparison GREATEROREQUAL term .
    (31) term -> term . PLUS factor
    (32) term -> term . MINUS factor

  ! shift/reduce conflict for MINUS resolved as shift
    GREATER         reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    LESS            reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    GREATEROREQUAL  reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    LESSOREQUAL     reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    EQUALS          reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    NOTEQUALS       reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    OR              reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    AND             reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    VAR             reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    FUNC            reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    IF              reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    WHILE           reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    PRINT           reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    ID              reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    NOT             reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    NUMBER          reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    LPAREN          reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    $end            reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    RPAREN          reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    THEN            reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    RBRACE          reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    COMMA           reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47

  ! MINUS           [ reduce using rule 28 (comparison -> comparison GREATEROREQUAL term .) ]


state 67

    (29) comparison -> comparison LESSOREQUAL term .
    (31) term -> term . PLUS factor
    (32) term -> term . MINUS factor

  ! shift/reduce conflict for MINUS resolved as shift
    GREATER         reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    LESS            reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    GREATEROREQUAL  reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    LESSOREQUAL     reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    EQUALS          reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    NOTEQUALS       reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    OR              reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    AND             reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    VAR             reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    FUNC            reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    IF              reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    WHILE           reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    PRINT           reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    ID              reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    NOT             reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    NUMBER          reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    LPAREN          reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    $end            reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    RPAREN          reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    THEN            reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    RBRACE          reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    COMMA           reduce using rule 29 (comparison -> comparison LESSOREQUAL term .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47

  ! MINUS           [ reduce using rule 29 (comparison -> comparison LESSOREQUAL term .) ]


state 68

    (31) term -> term PLUS factor .
    (34) factor -> factor . TIMES unary
    (35) factor -> factor . DIVIDE unary

    PLUS            reduce using rule 31 (term -> term PLUS factor .)
    MINUS           reduce using rule 31 (term -> term PLUS factor .)
    GREATER         reduce using rule 31 (term -> term PLUS factor .)
    LESS            reduce using rule 31 (term -> term PLUS factor .)
    GREATEROREQUAL  reduce using rule 31 (term -> term PLUS factor .)
    LESSOREQUAL     reduce using rule 31 (term -> term PLUS factor .)
    EQUALS          reduce using rule 31 (term -> term PLUS factor .)
    NOTEQUALS       reduce using rule 31 (term -> term PLUS factor .)
    OR              reduce using rule 31 (term -> term PLUS factor .)
    AND             reduce using rule 31 (term -> term PLUS factor .)
    VAR             reduce using rule 31 (term -> term PLUS factor .)
    FUNC            reduce using rule 31 (term -> term PLUS factor .)
    IF              reduce using rule 31 (term -> term PLUS factor .)
    WHILE           reduce using rule 31 (term -> term PLUS factor .)
    PRINT           reduce using rule 31 (term -> term PLUS factor .)
    ID              reduce using rule 31 (term -> term PLUS factor .)
    NOT             reduce using rule 31 (term -> term PLUS factor .)
    NUMBER          reduce using rule 31 (term -> term PLUS factor .)
    LPAREN          reduce using rule 31 (term -> term PLUS factor .)
    $end            reduce using rule 31 (term -> term PLUS factor .)
    RPAREN          reduce using rule 31 (term -> term PLUS factor .)
    THEN            reduce using rule 31 (term -> term PLUS factor .)
    RBRACE          reduce using rule 31 (term -> term PLUS factor .)
    COMMA           reduce using rule 31 (term -> term PLUS factor .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 69

    (32) term -> term MINUS factor .
    (34) factor -> factor . TIMES unary
    (35) factor -> factor . DIVIDE unary

    PLUS            reduce using rule 32 (term -> term MINUS factor .)
    MINUS           reduce using rule 32 (term -> term MINUS factor .)
    GREATER         reduce using rule 32 (term -> term MINUS factor .)
    LESS            reduce using rule 32 (term -> term MINUS factor .)
    GREATEROREQUAL  reduce using rule 32 (term -> term MINUS factor .)
    LESSOREQUAL     reduce using rule 32 (term -> term MINUS factor .)
    EQUALS          reduce using rule 32 (term -> term MINUS factor .)
    NOTEQUALS       reduce using rule 32 (term -> term MINUS factor .)
    OR              reduce using rule 32 (term -> term MINUS factor .)
    AND             reduce using rule 32 (term -> term MINUS factor .)
    VAR             reduce using rule 32 (term -> term MINUS factor .)
    FUNC            reduce using rule 32 (term -> term MINUS factor .)
    IF              reduce using rule 32 (term -> term MINUS factor .)
    WHILE           reduce using rule 32 (term -> term MINUS factor .)
    PRINT           reduce using rule 32 (term -> term MINUS factor .)
    ID              reduce using rule 32 (term -> term MINUS factor .)
    NOT             reduce using rule 32 (term -> term MINUS factor .)
    NUMBER          reduce using rule 32 (term -> term MINUS factor .)
    LPAREN          reduce using rule 32 (term -> term MINUS factor .)
    $end            reduce using rule 32 (term -> term MINUS factor .)
    RPAREN          reduce using rule 32 (term -> term MINUS factor .)
    THEN            reduce using rule 32 (term -> term MINUS factor .)
    RBRACE          reduce using rule 32 (term -> term MINUS factor .)
    COMMA           reduce using rule 32 (term -> term MINUS factor .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 70

    (34) factor -> factor TIMES unary .

    TIMES           reduce using rule 34 (factor -> factor TIMES unary .)
    DIVIDE          reduce using rule 34 (factor -> factor TIMES unary .)
    PLUS            reduce using rule 34 (factor -> factor TIMES unary .)
    MINUS           reduce using rule 34 (factor -> factor TIMES unary .)
    GREATER         reduce using rule 34 (factor -> factor TIMES unary .)
    LESS            reduce using rule 34 (factor -> factor TIMES unary .)
    GREATEROREQUAL  reduce using rule 34 (factor -> factor TIMES unary .)
    LESSOREQUAL     reduce using rule 34 (factor -> factor TIMES unary .)
    EQUALS          reduce using rule 34 (factor -> factor TIMES unary .)
    NOTEQUALS       reduce using rule 34 (factor -> factor TIMES unary .)
    OR              reduce using rule 34 (factor -> factor TIMES unary .)
    AND             reduce using rule 34 (factor -> factor TIMES unary .)
    VAR             reduce using rule 34 (factor -> factor TIMES unary .)
    FUNC            reduce using rule 34 (factor -> factor TIMES unary .)
    IF              reduce using rule 34 (factor -> factor TIMES unary .)
    WHILE           reduce using rule 34 (factor -> factor TIMES unary .)
    PRINT           reduce using rule 34 (factor -> factor TIMES unary .)
    ID              reduce using rule 34 (factor -> factor TIMES unary .)
    NOT             reduce using rule 34 (factor -> factor TIMES unary .)
    NUMBER          reduce using rule 34 (factor -> factor TIMES unary .)
    LPAREN          reduce using rule 34 (factor -> factor TIMES unary .)
    $end            reduce using rule 34 (factor -> factor TIMES unary .)
    RPAREN          reduce using rule 34 (factor -> factor TIMES unary .)
    THEN            reduce using rule 34 (factor -> factor TIMES unary .)
    RBRACE          reduce using rule 34 (factor -> factor TIMES unary .)
    COMMA           reduce using rule 34 (factor -> factor TIMES unary .)


state 71

    (35) factor -> factor DIVIDE unary .

    TIMES           reduce using rule 35 (factor -> factor DIVIDE unary .)
    DIVIDE          reduce using rule 35 (factor -> factor DIVIDE unary .)
    PLUS            reduce using rule 35 (factor -> factor DIVIDE unary .)
    MINUS           reduce using rule 35 (factor -> factor DIVIDE unary .)
    GREATER         reduce using rule 35 (factor -> factor DIVIDE unary .)
    LESS            reduce using rule 35 (factor -> factor DIVIDE unary .)
    GREATEROREQUAL  reduce using rule 35 (factor -> factor DIVIDE unary .)
    LESSOREQUAL     reduce using rule 35 (factor -> factor DIVIDE unary .)
    EQUALS          reduce using rule 35 (factor -> factor DIVIDE unary .)
    NOTEQUALS       reduce using rule 35 (factor -> factor DIVIDE unary .)
    OR              reduce using rule 35 (factor -> factor DIVIDE unary .)
    AND             reduce using rule 35 (factor -> factor DIVIDE unary .)
    VAR             reduce using rule 35 (factor -> factor DIVIDE unary .)
    FUNC            reduce using rule 35 (factor -> factor DIVIDE unary .)
    IF              reduce using rule 35 (factor -> factor DIVIDE unary .)
    WHILE           reduce using rule 35 (factor -> factor DIVIDE unary .)
    PRINT           reduce using rule 35 (factor -> factor DIVIDE unary .)
    ID              reduce using rule 35 (factor -> factor DIVIDE unary .)
    NOT             reduce using rule 35 (factor -> factor DIVIDE unary .)
    NUMBER          reduce using rule 35 (factor -> factor DIVIDE unary .)
    LPAREN          reduce using rule 35 (factor -> factor DIVIDE unary .)
    $end            reduce using rule 35 (factor -> factor DIVIDE unary .)
    RPAREN          reduce using rule 35 (factor -> factor DIVIDE unary .)
    THEN            reduce using rule 35 (factor -> factor DIVIDE unary .)
    RBRACE          reduce using rule 35 (factor -> factor DIVIDE unary .)
    COMMA           reduce using rule 35 (factor -> factor DIVIDE unary .)


state 72

    (40) call -> primary LPAREN arguments . RPAREN
    (45) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 79
    COMMA           shift and go to state 80


state 73

    (46) arguments -> expression .

    RPAREN          reduce using rule 46 (arguments -> expression .)
    COMMA           reduce using rule 46 (arguments -> expression .)


state 74

    (16) varDeclaration -> VAR ID ASSIGN expression .

    VAR             reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    FUNC            reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    IF              reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    WHILE           reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    PRINT           reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    ID              reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    NOT             reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    MINUS           reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    NUMBER          reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    LPAREN          reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    $end            reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)
    RBRACE          reduce using rule 16 (varDeclaration -> VAR ID ASSIGN expression .)


state 75

    (50) parameter_list -> ID .

    RPAREN          reduce using rule 50 (parameter_list -> ID .)
    COMMA           reduce using rule 50 (parameter_list -> ID .)


state 76

    (48) funcDeclaration -> FUNC ID LPAREN parameter_list . RPAREN LBRACE declaration_list RBRACE
    (49) parameter_list -> parameter_list . COMMA ID

    RPAREN          shift and go to state 81
    COMMA           shift and go to state 82


state 77

    (11) ifStatement -> IF expression THEN LBRACE . declaration_list RBRACE
    (12) ifStatement -> IF expression THEN LBRACE . declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 9
    declaration_list               shift and go to state 83
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 78

    (13) whileStatement -> WHILE expression THEN LBRACE . declaration_list RBRACE
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 9
    declaration_list               shift and go to state 84
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 79

    (40) call -> primary LPAREN arguments RPAREN .

    TIMES           reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    PLUS            reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    MINUS           reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    GREATER         reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    LESS            reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    GREATEROREQUAL  reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    LESSOREQUAL     reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    EQUALS          reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    OR              reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    AND             reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    VAR             reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    FUNC            reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    IF              reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    WHILE           reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    PRINT           reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    ID              reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    NOT             reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    NUMBER          reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    $end            reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    THEN            reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)
    COMMA           reduce using rule 40 (call -> primary LPAREN arguments RPAREN .)


state 80

    (45) arguments -> arguments COMMA . expression
    (17) expression -> . assignment
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 85
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 81

    (48) funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN . LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 86


state 82

    (49) parameter_list -> parameter_list COMMA . ID

    ID              shift and go to state 87


state 83

    (11) ifStatement -> IF expression THEN LBRACE declaration_list . RBRACE
    (12) ifStatement -> IF expression THEN LBRACE declaration_list . RBRACE ELSE LBRACE declaration_list RBRACE
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 88
    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 9
    declaration                    shift and go to state 30
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 84

    (13) whileStatement -> WHILE expression THEN LBRACE declaration_list . RBRACE
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 89
    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 9
    declaration                    shift and go to state 30
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 85

    (45) arguments -> arguments COMMA expression .

    RPAREN          reduce using rule 45 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 45 (arguments -> arguments COMMA expression .)


state 86

    (48) funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE . declaration_list RBRACE
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    declaration_list               shift and go to state 90
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    expression                     shift and go to state 9
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 87

    (49) parameter_list -> parameter_list COMMA ID .

    RPAREN          reduce using rule 49 (parameter_list -> parameter_list COMMA ID .)
    COMMA           reduce using rule 49 (parameter_list -> parameter_list COMMA ID .)


state 88

    (11) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .
    (12) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE . ELSE LBRACE declaration_list RBRACE

    VAR             reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    FUNC            reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    IF              reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    PRINT           reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    ID              reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    $end            reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    ELSE            shift and go to state 91


state 89

    (13) whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .

    VAR             reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    FUNC            reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    IF              reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    PRINT           reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    ID              reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    $end            reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 13 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)


state 90

    (48) funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list . RBRACE
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 92
    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    declaration                    shift and go to state 30
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    expression                     shift and go to state 9
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 91

    (12) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE . LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 93


state 92

    (48) funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .

    VAR             reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    FUNC            reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    IF              reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    PRINT           reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    ID              reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    $end            reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 48 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)


state 93

    (12) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE . declaration_list RBRACE
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 9
    declaration_list               shift and go to state 94
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 94

    (12) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list . RBRACE
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (15) varDeclaration -> . VAR ID
    (16) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (10) statement -> . printStatement
    (48) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (17) expression -> . assignment
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (12) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (13) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (14) printStatement -> . PRINT expression
    (18) assignment -> . ID ASSIGN assignment
    (19) assignment -> . logical
    (20) logical -> . logical OR equality
    (21) logical -> . logical AND equality
    (22) logical -> . equality
    (23) equality -> . equality EQUALS comparison
    (24) equality -> . equality NOTEQUALS comparison
    (25) equality -> . comparison
    (26) comparison -> . comparison GREATER term
    (27) comparison -> . comparison LESS term
    (28) comparison -> . comparison GREATEROREQUAL term
    (29) comparison -> . comparison LESSOREQUAL term
    (30) comparison -> . term
    (31) term -> . term PLUS factor
    (32) term -> . term MINUS factor
    (33) term -> . factor
    (34) factor -> . factor TIMES unary
    (35) factor -> . factor DIVIDE unary
    (36) factor -> . unary
    (37) unary -> . NOT unary
    (38) unary -> . MINUS unary
    (39) unary -> . call
    (40) call -> . primary LPAREN arguments RPAREN
    (41) call -> . primary
    (42) primary -> . NUMBER
    (43) primary -> . ID
    (44) primary -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 95
    VAR             shift and go to state 7
    FUNC            shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 24
    NUMBER          shift and go to state 29
    LPAREN          shift and go to state 14

    expression                     shift and go to state 9
    declaration                    shift and go to state 30
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    printStatement                 shift and go to state 12
    assignment                     shift and go to state 15
    logical                        shift and go to state 19
    equality                       shift and go to state 20
    comparison                     shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    unary                          shift and go to state 25
    call                           shift and go to state 27
    primary                        shift and go to state 28

state 95

    (12) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .

    VAR             reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    FUNC            reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    IF              reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    PRINT           reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    ID              reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    $end            reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 12 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 28 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
