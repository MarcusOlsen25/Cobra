Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration
Rule 3     declaration_list -> declaration_list declaration
Rule 4     declaration -> varDeclaration
Rule 5     declaration -> statement
Rule 6     declaration -> funcDeclaration
Rule 7     statement -> expression
Rule 8     statement -> ifStatement
Rule 9     statement -> whileStatement
Rule 10    ifStatement -> IF expression THEN LBRACE declaration_list RBRACE
Rule 11    ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
Rule 12    whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE
Rule 13    varDeclaration -> VAR ID
Rule 14    varDeclaration -> VAR ID ASSIGN expression
Rule 15    expression -> assignment
Rule 16    assignment -> ID ASSIGN assignment
Rule 17    assignment -> logical
Rule 18    logical -> logical OR equality
Rule 19    logical -> logical AND equality
Rule 20    logical -> equality
Rule 21    equality -> equality EQUALS comparison
Rule 22    equality -> equality NOTEQUALS comparison
Rule 23    equality -> comparison
Rule 24    comparison -> comparison GREATER term
Rule 25    comparison -> comparison LESS term
Rule 26    comparison -> comparison GREATEROREQUAL term
Rule 27    comparison -> comparison LESSOREQUAL term
Rule 28    comparison -> term
Rule 29    term -> term PLUS factor
Rule 30    term -> term MINUS factor
Rule 31    term -> factor
Rule 32    factor -> factor TIMES unary
Rule 33    factor -> factor DIVIDE unary
Rule 34    factor -> unary
Rule 35    unary -> NOT unary
Rule 36    unary -> call
Rule 37    call -> primary LPAREN arguments RPAREN
Rule 38    call -> primary
Rule 39    primary -> NUMBER
Rule 40    primary -> ID
Rule 41    primary -> LPAREN expression RPAREN
Rule 42    arguments -> arguments COMMA expression
Rule 43    arguments -> expression
Rule 44    arguments -> <empty>
Rule 45    funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
Rule 46    parameter_list -> parameter_list COMMA ID
Rule 47    parameter_list -> ID
Rule 48    parameter_list -> <empty>

Terminals, with rules where they appear

AND                  : 19
ASSIGN               : 14 16
COMMA                : 42 46
DIVIDE               : 33
ELSE                 : 11
EQUALS               : 21
FUNC                 : 45
GREATER              : 24
GREATEROREQUAL       : 26
ID                   : 13 14 16 40 45 46 47
IF                   : 10 11
LBRACE               : 10 11 11 12 45
LESS                 : 25
LESSOREQUAL          : 27
LPAREN               : 37 41 45
MINUS                : 30
NOT                  : 35
NOTEQUALS            : 22
NUMBER               : 39
OR                   : 18
PLUS                 : 29
RBRACE               : 10 11 11 12 45
RETURN               : 
RPAREN               : 37 41 45
THEN                 : 10 11 12
TIMES                : 32
VAR                  : 13 14
WHILE                : 12
error                : 

Nonterminals, with rules where they appear

arguments            : 37 42
assignment           : 15 16
call                 : 36
comparison           : 21 22 23 24 25 26 27
declaration          : 2 3
declaration_list     : 1 3 10 11 11 12 45
equality             : 18 19 20 21 22
expression           : 7 10 11 12 14 41 42 43
factor               : 29 30 31 32 33
funcDeclaration      : 6
ifStatement          : 8
logical              : 17 18 19
parameter_list       : 45 46
primary              : 37 38
program              : 0
statement            : 5
term                 : 24 25 26 27 28 29 30
unary                : 32 33 34 35
varDeclaration       : 4
whileStatement       : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    program                        shift and go to state 1
    declaration_list               shift and go to state 2
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    expression                     shift and go to state 9
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_list .
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (program -> declaration_list .)
    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    declaration                    shift and go to state 27
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    expression                     shift and go to state 9
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 3

    (2) declaration_list -> declaration .

    VAR             reduce using rule 2 (declaration_list -> declaration .)
    FUNC            reduce using rule 2 (declaration_list -> declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration .)
    ID              reduce using rule 2 (declaration_list -> declaration .)
    NOT             reduce using rule 2 (declaration_list -> declaration .)
    NUMBER          reduce using rule 2 (declaration_list -> declaration .)
    LPAREN          reduce using rule 2 (declaration_list -> declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration .)
    RBRACE          reduce using rule 2 (declaration_list -> declaration .)


state 4

    (4) declaration -> varDeclaration .

    VAR             reduce using rule 4 (declaration -> varDeclaration .)
    FUNC            reduce using rule 4 (declaration -> varDeclaration .)
    IF              reduce using rule 4 (declaration -> varDeclaration .)
    WHILE           reduce using rule 4 (declaration -> varDeclaration .)
    ID              reduce using rule 4 (declaration -> varDeclaration .)
    NOT             reduce using rule 4 (declaration -> varDeclaration .)
    NUMBER          reduce using rule 4 (declaration -> varDeclaration .)
    LPAREN          reduce using rule 4 (declaration -> varDeclaration .)
    $end            reduce using rule 4 (declaration -> varDeclaration .)
    RBRACE          reduce using rule 4 (declaration -> varDeclaration .)


state 5

    (5) declaration -> statement .

    VAR             reduce using rule 5 (declaration -> statement .)
    FUNC            reduce using rule 5 (declaration -> statement .)
    IF              reduce using rule 5 (declaration -> statement .)
    WHILE           reduce using rule 5 (declaration -> statement .)
    ID              reduce using rule 5 (declaration -> statement .)
    NOT             reduce using rule 5 (declaration -> statement .)
    NUMBER          reduce using rule 5 (declaration -> statement .)
    LPAREN          reduce using rule 5 (declaration -> statement .)
    $end            reduce using rule 5 (declaration -> statement .)
    RBRACE          reduce using rule 5 (declaration -> statement .)


state 6

    (6) declaration -> funcDeclaration .

    VAR             reduce using rule 6 (declaration -> funcDeclaration .)
    FUNC            reduce using rule 6 (declaration -> funcDeclaration .)
    IF              reduce using rule 6 (declaration -> funcDeclaration .)
    WHILE           reduce using rule 6 (declaration -> funcDeclaration .)
    ID              reduce using rule 6 (declaration -> funcDeclaration .)
    NOT             reduce using rule 6 (declaration -> funcDeclaration .)
    NUMBER          reduce using rule 6 (declaration -> funcDeclaration .)
    LPAREN          reduce using rule 6 (declaration -> funcDeclaration .)
    $end            reduce using rule 6 (declaration -> funcDeclaration .)
    RBRACE          reduce using rule 6 (declaration -> funcDeclaration .)


state 7

    (13) varDeclaration -> VAR . ID
    (14) varDeclaration -> VAR . ID ASSIGN expression

    ID              shift and go to state 28


state 8

    (16) assignment -> ID . ASSIGN assignment
    (40) primary -> ID .

    ASSIGN          shift and go to state 29
    LPAREN          reduce using rule 40 (primary -> ID .)
    TIMES           reduce using rule 40 (primary -> ID .)
    DIVIDE          reduce using rule 40 (primary -> ID .)
    PLUS            reduce using rule 40 (primary -> ID .)
    MINUS           reduce using rule 40 (primary -> ID .)
    GREATER         reduce using rule 40 (primary -> ID .)
    LESS            reduce using rule 40 (primary -> ID .)
    GREATEROREQUAL  reduce using rule 40 (primary -> ID .)
    LESSOREQUAL     reduce using rule 40 (primary -> ID .)
    EQUALS          reduce using rule 40 (primary -> ID .)
    NOTEQUALS       reduce using rule 40 (primary -> ID .)
    OR              reduce using rule 40 (primary -> ID .)
    AND             reduce using rule 40 (primary -> ID .)
    VAR             reduce using rule 40 (primary -> ID .)
    FUNC            reduce using rule 40 (primary -> ID .)
    IF              reduce using rule 40 (primary -> ID .)
    WHILE           reduce using rule 40 (primary -> ID .)
    ID              reduce using rule 40 (primary -> ID .)
    NOT             reduce using rule 40 (primary -> ID .)
    NUMBER          reduce using rule 40 (primary -> ID .)
    $end            reduce using rule 40 (primary -> ID .)
    RPAREN          reduce using rule 40 (primary -> ID .)
    THEN            reduce using rule 40 (primary -> ID .)
    COMMA           reduce using rule 40 (primary -> ID .)
    RBRACE          reduce using rule 40 (primary -> ID .)


state 9

    (7) statement -> expression .

    VAR             reduce using rule 7 (statement -> expression .)
    FUNC            reduce using rule 7 (statement -> expression .)
    IF              reduce using rule 7 (statement -> expression .)
    WHILE           reduce using rule 7 (statement -> expression .)
    ID              reduce using rule 7 (statement -> expression .)
    NOT             reduce using rule 7 (statement -> expression .)
    NUMBER          reduce using rule 7 (statement -> expression .)
    LPAREN          reduce using rule 7 (statement -> expression .)
    $end            reduce using rule 7 (statement -> expression .)
    RBRACE          reduce using rule 7 (statement -> expression .)


state 10

    (8) statement -> ifStatement .

    VAR             reduce using rule 8 (statement -> ifStatement .)
    FUNC            reduce using rule 8 (statement -> ifStatement .)
    IF              reduce using rule 8 (statement -> ifStatement .)
    WHILE           reduce using rule 8 (statement -> ifStatement .)
    ID              reduce using rule 8 (statement -> ifStatement .)
    NOT             reduce using rule 8 (statement -> ifStatement .)
    NUMBER          reduce using rule 8 (statement -> ifStatement .)
    LPAREN          reduce using rule 8 (statement -> ifStatement .)
    $end            reduce using rule 8 (statement -> ifStatement .)
    RBRACE          reduce using rule 8 (statement -> ifStatement .)


state 11

    (9) statement -> whileStatement .

    VAR             reduce using rule 9 (statement -> whileStatement .)
    FUNC            reduce using rule 9 (statement -> whileStatement .)
    IF              reduce using rule 9 (statement -> whileStatement .)
    WHILE           reduce using rule 9 (statement -> whileStatement .)
    ID              reduce using rule 9 (statement -> whileStatement .)
    NOT             reduce using rule 9 (statement -> whileStatement .)
    NUMBER          reduce using rule 9 (statement -> whileStatement .)
    LPAREN          reduce using rule 9 (statement -> whileStatement .)
    $end            reduce using rule 9 (statement -> whileStatement .)
    RBRACE          reduce using rule 9 (statement -> whileStatement .)


state 12

    (45) funcDeclaration -> FUNC . ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE

    ID              shift and go to state 30


state 13

    (41) primary -> LPAREN . expression RPAREN
    (15) expression -> . assignment
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 31
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 14

    (15) expression -> assignment .

    VAR             reduce using rule 15 (expression -> assignment .)
    FUNC            reduce using rule 15 (expression -> assignment .)
    IF              reduce using rule 15 (expression -> assignment .)
    WHILE           reduce using rule 15 (expression -> assignment .)
    ID              reduce using rule 15 (expression -> assignment .)
    NOT             reduce using rule 15 (expression -> assignment .)
    NUMBER          reduce using rule 15 (expression -> assignment .)
    LPAREN          reduce using rule 15 (expression -> assignment .)
    $end            reduce using rule 15 (expression -> assignment .)
    RPAREN          reduce using rule 15 (expression -> assignment .)
    THEN            reduce using rule 15 (expression -> assignment .)
    COMMA           reduce using rule 15 (expression -> assignment .)
    RBRACE          reduce using rule 15 (expression -> assignment .)


state 15

    (10) ifStatement -> IF . expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> IF . expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 32
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 16

    (12) whileStatement -> WHILE . expression THEN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 33
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 17

    (17) assignment -> logical .
    (18) logical -> logical . OR equality
    (19) logical -> logical . AND equality

    VAR             reduce using rule 17 (assignment -> logical .)
    FUNC            reduce using rule 17 (assignment -> logical .)
    IF              reduce using rule 17 (assignment -> logical .)
    WHILE           reduce using rule 17 (assignment -> logical .)
    ID              reduce using rule 17 (assignment -> logical .)
    NOT             reduce using rule 17 (assignment -> logical .)
    NUMBER          reduce using rule 17 (assignment -> logical .)
    LPAREN          reduce using rule 17 (assignment -> logical .)
    $end            reduce using rule 17 (assignment -> logical .)
    RPAREN          reduce using rule 17 (assignment -> logical .)
    THEN            reduce using rule 17 (assignment -> logical .)
    COMMA           reduce using rule 17 (assignment -> logical .)
    RBRACE          reduce using rule 17 (assignment -> logical .)
    OR              shift and go to state 34
    AND             shift and go to state 35


state 18

    (20) logical -> equality .
    (21) equality -> equality . EQUALS comparison
    (22) equality -> equality . NOTEQUALS comparison

    OR              reduce using rule 20 (logical -> equality .)
    AND             reduce using rule 20 (logical -> equality .)
    VAR             reduce using rule 20 (logical -> equality .)
    FUNC            reduce using rule 20 (logical -> equality .)
    IF              reduce using rule 20 (logical -> equality .)
    WHILE           reduce using rule 20 (logical -> equality .)
    ID              reduce using rule 20 (logical -> equality .)
    NOT             reduce using rule 20 (logical -> equality .)
    NUMBER          reduce using rule 20 (logical -> equality .)
    LPAREN          reduce using rule 20 (logical -> equality .)
    $end            reduce using rule 20 (logical -> equality .)
    RPAREN          reduce using rule 20 (logical -> equality .)
    THEN            reduce using rule 20 (logical -> equality .)
    COMMA           reduce using rule 20 (logical -> equality .)
    RBRACE          reduce using rule 20 (logical -> equality .)
    EQUALS          shift and go to state 36
    NOTEQUALS       shift and go to state 37


state 19

    (23) equality -> comparison .
    (24) comparison -> comparison . GREATER term
    (25) comparison -> comparison . LESS term
    (26) comparison -> comparison . GREATEROREQUAL term
    (27) comparison -> comparison . LESSOREQUAL term

    EQUALS          reduce using rule 23 (equality -> comparison .)
    NOTEQUALS       reduce using rule 23 (equality -> comparison .)
    OR              reduce using rule 23 (equality -> comparison .)
    AND             reduce using rule 23 (equality -> comparison .)
    VAR             reduce using rule 23 (equality -> comparison .)
    FUNC            reduce using rule 23 (equality -> comparison .)
    IF              reduce using rule 23 (equality -> comparison .)
    WHILE           reduce using rule 23 (equality -> comparison .)
    ID              reduce using rule 23 (equality -> comparison .)
    NOT             reduce using rule 23 (equality -> comparison .)
    NUMBER          reduce using rule 23 (equality -> comparison .)
    LPAREN          reduce using rule 23 (equality -> comparison .)
    $end            reduce using rule 23 (equality -> comparison .)
    RPAREN          reduce using rule 23 (equality -> comparison .)
    THEN            reduce using rule 23 (equality -> comparison .)
    COMMA           reduce using rule 23 (equality -> comparison .)
    RBRACE          reduce using rule 23 (equality -> comparison .)
    GREATER         shift and go to state 38
    LESS            shift and go to state 39
    GREATEROREQUAL  shift and go to state 40
    LESSOREQUAL     shift and go to state 41


state 20

    (28) comparison -> term .
    (29) term -> term . PLUS factor
    (30) term -> term . MINUS factor

    GREATER         reduce using rule 28 (comparison -> term .)
    LESS            reduce using rule 28 (comparison -> term .)
    GREATEROREQUAL  reduce using rule 28 (comparison -> term .)
    LESSOREQUAL     reduce using rule 28 (comparison -> term .)
    EQUALS          reduce using rule 28 (comparison -> term .)
    NOTEQUALS       reduce using rule 28 (comparison -> term .)
    OR              reduce using rule 28 (comparison -> term .)
    AND             reduce using rule 28 (comparison -> term .)
    VAR             reduce using rule 28 (comparison -> term .)
    FUNC            reduce using rule 28 (comparison -> term .)
    IF              reduce using rule 28 (comparison -> term .)
    WHILE           reduce using rule 28 (comparison -> term .)
    ID              reduce using rule 28 (comparison -> term .)
    NOT             reduce using rule 28 (comparison -> term .)
    NUMBER          reduce using rule 28 (comparison -> term .)
    LPAREN          reduce using rule 28 (comparison -> term .)
    $end            reduce using rule 28 (comparison -> term .)
    RPAREN          reduce using rule 28 (comparison -> term .)
    THEN            reduce using rule 28 (comparison -> term .)
    COMMA           reduce using rule 28 (comparison -> term .)
    RBRACE          reduce using rule 28 (comparison -> term .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43


state 21

    (31) term -> factor .
    (32) factor -> factor . TIMES unary
    (33) factor -> factor . DIVIDE unary

    PLUS            reduce using rule 31 (term -> factor .)
    MINUS           reduce using rule 31 (term -> factor .)
    GREATER         reduce using rule 31 (term -> factor .)
    LESS            reduce using rule 31 (term -> factor .)
    GREATEROREQUAL  reduce using rule 31 (term -> factor .)
    LESSOREQUAL     reduce using rule 31 (term -> factor .)
    EQUALS          reduce using rule 31 (term -> factor .)
    NOTEQUALS       reduce using rule 31 (term -> factor .)
    OR              reduce using rule 31 (term -> factor .)
    AND             reduce using rule 31 (term -> factor .)
    VAR             reduce using rule 31 (term -> factor .)
    FUNC            reduce using rule 31 (term -> factor .)
    IF              reduce using rule 31 (term -> factor .)
    WHILE           reduce using rule 31 (term -> factor .)
    ID              reduce using rule 31 (term -> factor .)
    NOT             reduce using rule 31 (term -> factor .)
    NUMBER          reduce using rule 31 (term -> factor .)
    LPAREN          reduce using rule 31 (term -> factor .)
    $end            reduce using rule 31 (term -> factor .)
    RPAREN          reduce using rule 31 (term -> factor .)
    THEN            reduce using rule 31 (term -> factor .)
    COMMA           reduce using rule 31 (term -> factor .)
    RBRACE          reduce using rule 31 (term -> factor .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45


state 22

    (34) factor -> unary .

    TIMES           reduce using rule 34 (factor -> unary .)
    DIVIDE          reduce using rule 34 (factor -> unary .)
    PLUS            reduce using rule 34 (factor -> unary .)
    MINUS           reduce using rule 34 (factor -> unary .)
    GREATER         reduce using rule 34 (factor -> unary .)
    LESS            reduce using rule 34 (factor -> unary .)
    GREATEROREQUAL  reduce using rule 34 (factor -> unary .)
    LESSOREQUAL     reduce using rule 34 (factor -> unary .)
    EQUALS          reduce using rule 34 (factor -> unary .)
    NOTEQUALS       reduce using rule 34 (factor -> unary .)
    OR              reduce using rule 34 (factor -> unary .)
    AND             reduce using rule 34 (factor -> unary .)
    VAR             reduce using rule 34 (factor -> unary .)
    FUNC            reduce using rule 34 (factor -> unary .)
    IF              reduce using rule 34 (factor -> unary .)
    WHILE           reduce using rule 34 (factor -> unary .)
    ID              reduce using rule 34 (factor -> unary .)
    NOT             reduce using rule 34 (factor -> unary .)
    NUMBER          reduce using rule 34 (factor -> unary .)
    LPAREN          reduce using rule 34 (factor -> unary .)
    $end            reduce using rule 34 (factor -> unary .)
    RPAREN          reduce using rule 34 (factor -> unary .)
    THEN            reduce using rule 34 (factor -> unary .)
    COMMA           reduce using rule 34 (factor -> unary .)
    RBRACE          reduce using rule 34 (factor -> unary .)


state 23

    (35) unary -> NOT . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    unary                          shift and go to state 46
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 24

    (36) unary -> call .

    TIMES           reduce using rule 36 (unary -> call .)
    DIVIDE          reduce using rule 36 (unary -> call .)
    PLUS            reduce using rule 36 (unary -> call .)
    MINUS           reduce using rule 36 (unary -> call .)
    GREATER         reduce using rule 36 (unary -> call .)
    LESS            reduce using rule 36 (unary -> call .)
    GREATEROREQUAL  reduce using rule 36 (unary -> call .)
    LESSOREQUAL     reduce using rule 36 (unary -> call .)
    EQUALS          reduce using rule 36 (unary -> call .)
    NOTEQUALS       reduce using rule 36 (unary -> call .)
    OR              reduce using rule 36 (unary -> call .)
    AND             reduce using rule 36 (unary -> call .)
    VAR             reduce using rule 36 (unary -> call .)
    FUNC            reduce using rule 36 (unary -> call .)
    IF              reduce using rule 36 (unary -> call .)
    WHILE           reduce using rule 36 (unary -> call .)
    ID              reduce using rule 36 (unary -> call .)
    NOT             reduce using rule 36 (unary -> call .)
    NUMBER          reduce using rule 36 (unary -> call .)
    LPAREN          reduce using rule 36 (unary -> call .)
    $end            reduce using rule 36 (unary -> call .)
    RPAREN          reduce using rule 36 (unary -> call .)
    THEN            reduce using rule 36 (unary -> call .)
    COMMA           reduce using rule 36 (unary -> call .)
    RBRACE          reduce using rule 36 (unary -> call .)


state 25

    (37) call -> primary . LPAREN arguments RPAREN
    (38) call -> primary .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 48
    TIMES           reduce using rule 38 (call -> primary .)
    DIVIDE          reduce using rule 38 (call -> primary .)
    PLUS            reduce using rule 38 (call -> primary .)
    MINUS           reduce using rule 38 (call -> primary .)
    GREATER         reduce using rule 38 (call -> primary .)
    LESS            reduce using rule 38 (call -> primary .)
    GREATEROREQUAL  reduce using rule 38 (call -> primary .)
    LESSOREQUAL     reduce using rule 38 (call -> primary .)
    EQUALS          reduce using rule 38 (call -> primary .)
    NOTEQUALS       reduce using rule 38 (call -> primary .)
    OR              reduce using rule 38 (call -> primary .)
    AND             reduce using rule 38 (call -> primary .)
    VAR             reduce using rule 38 (call -> primary .)
    FUNC            reduce using rule 38 (call -> primary .)
    IF              reduce using rule 38 (call -> primary .)
    WHILE           reduce using rule 38 (call -> primary .)
    ID              reduce using rule 38 (call -> primary .)
    NOT             reduce using rule 38 (call -> primary .)
    NUMBER          reduce using rule 38 (call -> primary .)
    $end            reduce using rule 38 (call -> primary .)
    RPAREN          reduce using rule 38 (call -> primary .)
    THEN            reduce using rule 38 (call -> primary .)
    COMMA           reduce using rule 38 (call -> primary .)
    RBRACE          reduce using rule 38 (call -> primary .)

  ! LPAREN          [ reduce using rule 38 (call -> primary .) ]


state 26

    (39) primary -> NUMBER .

    LPAREN          reduce using rule 39 (primary -> NUMBER .)
    TIMES           reduce using rule 39 (primary -> NUMBER .)
    DIVIDE          reduce using rule 39 (primary -> NUMBER .)
    PLUS            reduce using rule 39 (primary -> NUMBER .)
    MINUS           reduce using rule 39 (primary -> NUMBER .)
    GREATER         reduce using rule 39 (primary -> NUMBER .)
    LESS            reduce using rule 39 (primary -> NUMBER .)
    GREATEROREQUAL  reduce using rule 39 (primary -> NUMBER .)
    LESSOREQUAL     reduce using rule 39 (primary -> NUMBER .)
    EQUALS          reduce using rule 39 (primary -> NUMBER .)
    NOTEQUALS       reduce using rule 39 (primary -> NUMBER .)
    OR              reduce using rule 39 (primary -> NUMBER .)
    AND             reduce using rule 39 (primary -> NUMBER .)
    VAR             reduce using rule 39 (primary -> NUMBER .)
    FUNC            reduce using rule 39 (primary -> NUMBER .)
    IF              reduce using rule 39 (primary -> NUMBER .)
    WHILE           reduce using rule 39 (primary -> NUMBER .)
    ID              reduce using rule 39 (primary -> NUMBER .)
    NOT             reduce using rule 39 (primary -> NUMBER .)
    NUMBER          reduce using rule 39 (primary -> NUMBER .)
    $end            reduce using rule 39 (primary -> NUMBER .)
    RPAREN          reduce using rule 39 (primary -> NUMBER .)
    THEN            reduce using rule 39 (primary -> NUMBER .)
    COMMA           reduce using rule 39 (primary -> NUMBER .)
    RBRACE          reduce using rule 39 (primary -> NUMBER .)


state 27

    (3) declaration_list -> declaration_list declaration .

    VAR             reduce using rule 3 (declaration_list -> declaration_list declaration .)
    FUNC            reduce using rule 3 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 3 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 3 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 3 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 3 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 3 (declaration_list -> declaration_list declaration .)


state 28

    (13) varDeclaration -> VAR ID .
    (14) varDeclaration -> VAR ID . ASSIGN expression

    VAR             reduce using rule 13 (varDeclaration -> VAR ID .)
    FUNC            reduce using rule 13 (varDeclaration -> VAR ID .)
    IF              reduce using rule 13 (varDeclaration -> VAR ID .)
    WHILE           reduce using rule 13 (varDeclaration -> VAR ID .)
    ID              reduce using rule 13 (varDeclaration -> VAR ID .)
    NOT             reduce using rule 13 (varDeclaration -> VAR ID .)
    NUMBER          reduce using rule 13 (varDeclaration -> VAR ID .)
    LPAREN          reduce using rule 13 (varDeclaration -> VAR ID .)
    $end            reduce using rule 13 (varDeclaration -> VAR ID .)
    RBRACE          reduce using rule 13 (varDeclaration -> VAR ID .)
    ASSIGN          shift and go to state 49


state 29

    (16) assignment -> ID ASSIGN . assignment
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    assignment                     shift and go to state 50
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 30

    (45) funcDeclaration -> FUNC ID . LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE

    LPAREN          shift and go to state 51


state 31

    (41) primary -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 52


state 32

    (10) ifStatement -> IF expression . THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> IF expression . THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE

    THEN            shift and go to state 53


state 33

    (12) whileStatement -> WHILE expression . THEN LBRACE declaration_list RBRACE

    THEN            shift and go to state 54


state 34

    (18) logical -> logical OR . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    equality                       shift and go to state 55
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 35

    (19) logical -> logical AND . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    equality                       shift and go to state 56
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 36

    (21) equality -> equality EQUALS . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    comparison                     shift and go to state 57
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 37

    (22) equality -> equality NOTEQUALS . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    comparison                     shift and go to state 58
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 38

    (24) comparison -> comparison GREATER . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    term                           shift and go to state 59
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 39

    (25) comparison -> comparison LESS . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    term                           shift and go to state 60
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 40

    (26) comparison -> comparison GREATEROREQUAL . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    term                           shift and go to state 61
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 41

    (27) comparison -> comparison LESSOREQUAL . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    term                           shift and go to state 62
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 42

    (29) term -> term PLUS . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    factor                         shift and go to state 63
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 43

    (30) term -> term MINUS . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    factor                         shift and go to state 64
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 44

    (32) factor -> factor TIMES . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    unary                          shift and go to state 65
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 45

    (33) factor -> factor DIVIDE . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    ID              shift and go to state 47
    LPAREN          shift and go to state 13

    unary                          shift and go to state 66
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 46

    (35) unary -> NOT unary .

    TIMES           reduce using rule 35 (unary -> NOT unary .)
    DIVIDE          reduce using rule 35 (unary -> NOT unary .)
    PLUS            reduce using rule 35 (unary -> NOT unary .)
    MINUS           reduce using rule 35 (unary -> NOT unary .)
    GREATER         reduce using rule 35 (unary -> NOT unary .)
    LESS            reduce using rule 35 (unary -> NOT unary .)
    GREATEROREQUAL  reduce using rule 35 (unary -> NOT unary .)
    LESSOREQUAL     reduce using rule 35 (unary -> NOT unary .)
    EQUALS          reduce using rule 35 (unary -> NOT unary .)
    NOTEQUALS       reduce using rule 35 (unary -> NOT unary .)
    OR              reduce using rule 35 (unary -> NOT unary .)
    AND             reduce using rule 35 (unary -> NOT unary .)
    VAR             reduce using rule 35 (unary -> NOT unary .)
    FUNC            reduce using rule 35 (unary -> NOT unary .)
    IF              reduce using rule 35 (unary -> NOT unary .)
    WHILE           reduce using rule 35 (unary -> NOT unary .)
    ID              reduce using rule 35 (unary -> NOT unary .)
    NOT             reduce using rule 35 (unary -> NOT unary .)
    NUMBER          reduce using rule 35 (unary -> NOT unary .)
    LPAREN          reduce using rule 35 (unary -> NOT unary .)
    $end            reduce using rule 35 (unary -> NOT unary .)
    RPAREN          reduce using rule 35 (unary -> NOT unary .)
    THEN            reduce using rule 35 (unary -> NOT unary .)
    COMMA           reduce using rule 35 (unary -> NOT unary .)
    RBRACE          reduce using rule 35 (unary -> NOT unary .)


state 47

    (40) primary -> ID .

    LPAREN          reduce using rule 40 (primary -> ID .)
    TIMES           reduce using rule 40 (primary -> ID .)
    DIVIDE          reduce using rule 40 (primary -> ID .)
    PLUS            reduce using rule 40 (primary -> ID .)
    MINUS           reduce using rule 40 (primary -> ID .)
    GREATER         reduce using rule 40 (primary -> ID .)
    LESS            reduce using rule 40 (primary -> ID .)
    GREATEROREQUAL  reduce using rule 40 (primary -> ID .)
    LESSOREQUAL     reduce using rule 40 (primary -> ID .)
    EQUALS          reduce using rule 40 (primary -> ID .)
    NOTEQUALS       reduce using rule 40 (primary -> ID .)
    OR              reduce using rule 40 (primary -> ID .)
    AND             reduce using rule 40 (primary -> ID .)
    VAR             reduce using rule 40 (primary -> ID .)
    FUNC            reduce using rule 40 (primary -> ID .)
    IF              reduce using rule 40 (primary -> ID .)
    WHILE           reduce using rule 40 (primary -> ID .)
    ID              reduce using rule 40 (primary -> ID .)
    NOT             reduce using rule 40 (primary -> ID .)
    NUMBER          reduce using rule 40 (primary -> ID .)
    $end            reduce using rule 40 (primary -> ID .)
    RPAREN          reduce using rule 40 (primary -> ID .)
    THEN            reduce using rule 40 (primary -> ID .)
    COMMA           reduce using rule 40 (primary -> ID .)
    RBRACE          reduce using rule 40 (primary -> ID .)


state 48

    (37) call -> primary LPAREN . arguments RPAREN
    (42) arguments -> . arguments COMMA expression
    (43) arguments -> . expression
    (44) arguments -> .
    (15) expression -> . assignment
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 44 (arguments -> .)
    COMMA           reduce using rule 44 (arguments -> .)
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    primary                        shift and go to state 25
    arguments                      shift and go to state 67
    expression                     shift and go to state 68
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24

state 49

    (14) varDeclaration -> VAR ID ASSIGN . expression
    (15) expression -> . assignment
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 69
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 50

    (16) assignment -> ID ASSIGN assignment .

    VAR             reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    FUNC            reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    IF              reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    WHILE           reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    ID              reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    NOT             reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    NUMBER          reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    LPAREN          reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    $end            reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    RPAREN          reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    THEN            reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    COMMA           reduce using rule 16 (assignment -> ID ASSIGN assignment .)
    RBRACE          reduce using rule 16 (assignment -> ID ASSIGN assignment .)


state 51

    (45) funcDeclaration -> FUNC ID LPAREN . parameter_list RPAREN LBRACE declaration_list RBRACE
    (46) parameter_list -> . parameter_list COMMA ID
    (47) parameter_list -> . ID
    (48) parameter_list -> .

    ID              shift and go to state 70
    RPAREN          reduce using rule 48 (parameter_list -> .)
    COMMA           reduce using rule 48 (parameter_list -> .)

    parameter_list                 shift and go to state 71

state 52

    (41) primary -> LPAREN expression RPAREN .

    LPAREN          reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    LESS            reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    GREATEROREQUAL  reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    LESSOREQUAL     reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    OR              reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    AND             reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    VAR             reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    IF              reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    ID              reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    NOT             reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    $end            reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    THEN            reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 41 (primary -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 41 (primary -> LPAREN expression RPAREN .)


state 53

    (10) ifStatement -> IF expression THEN . LBRACE declaration_list RBRACE
    (11) ifStatement -> IF expression THEN . LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 72


state 54

    (12) whileStatement -> WHILE expression THEN . LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 73


state 55

    (18) logical -> logical OR equality .
    (21) equality -> equality . EQUALS comparison
    (22) equality -> equality . NOTEQUALS comparison

    OR              reduce using rule 18 (logical -> logical OR equality .)
    AND             reduce using rule 18 (logical -> logical OR equality .)
    VAR             reduce using rule 18 (logical -> logical OR equality .)
    FUNC            reduce using rule 18 (logical -> logical OR equality .)
    IF              reduce using rule 18 (logical -> logical OR equality .)
    WHILE           reduce using rule 18 (logical -> logical OR equality .)
    ID              reduce using rule 18 (logical -> logical OR equality .)
    NOT             reduce using rule 18 (logical -> logical OR equality .)
    NUMBER          reduce using rule 18 (logical -> logical OR equality .)
    LPAREN          reduce using rule 18 (logical -> logical OR equality .)
    $end            reduce using rule 18 (logical -> logical OR equality .)
    RPAREN          reduce using rule 18 (logical -> logical OR equality .)
    THEN            reduce using rule 18 (logical -> logical OR equality .)
    COMMA           reduce using rule 18 (logical -> logical OR equality .)
    RBRACE          reduce using rule 18 (logical -> logical OR equality .)
    EQUALS          shift and go to state 36
    NOTEQUALS       shift and go to state 37


state 56

    (19) logical -> logical AND equality .
    (21) equality -> equality . EQUALS comparison
    (22) equality -> equality . NOTEQUALS comparison

    OR              reduce using rule 19 (logical -> logical AND equality .)
    AND             reduce using rule 19 (logical -> logical AND equality .)
    VAR             reduce using rule 19 (logical -> logical AND equality .)
    FUNC            reduce using rule 19 (logical -> logical AND equality .)
    IF              reduce using rule 19 (logical -> logical AND equality .)
    WHILE           reduce using rule 19 (logical -> logical AND equality .)
    ID              reduce using rule 19 (logical -> logical AND equality .)
    NOT             reduce using rule 19 (logical -> logical AND equality .)
    NUMBER          reduce using rule 19 (logical -> logical AND equality .)
    LPAREN          reduce using rule 19 (logical -> logical AND equality .)
    $end            reduce using rule 19 (logical -> logical AND equality .)
    RPAREN          reduce using rule 19 (logical -> logical AND equality .)
    THEN            reduce using rule 19 (logical -> logical AND equality .)
    COMMA           reduce using rule 19 (logical -> logical AND equality .)
    RBRACE          reduce using rule 19 (logical -> logical AND equality .)
    EQUALS          shift and go to state 36
    NOTEQUALS       shift and go to state 37


state 57

    (21) equality -> equality EQUALS comparison .
    (24) comparison -> comparison . GREATER term
    (25) comparison -> comparison . LESS term
    (26) comparison -> comparison . GREATEROREQUAL term
    (27) comparison -> comparison . LESSOREQUAL term

    EQUALS          reduce using rule 21 (equality -> equality EQUALS comparison .)
    NOTEQUALS       reduce using rule 21 (equality -> equality EQUALS comparison .)
    OR              reduce using rule 21 (equality -> equality EQUALS comparison .)
    AND             reduce using rule 21 (equality -> equality EQUALS comparison .)
    VAR             reduce using rule 21 (equality -> equality EQUALS comparison .)
    FUNC            reduce using rule 21 (equality -> equality EQUALS comparison .)
    IF              reduce using rule 21 (equality -> equality EQUALS comparison .)
    WHILE           reduce using rule 21 (equality -> equality EQUALS comparison .)
    ID              reduce using rule 21 (equality -> equality EQUALS comparison .)
    NOT             reduce using rule 21 (equality -> equality EQUALS comparison .)
    NUMBER          reduce using rule 21 (equality -> equality EQUALS comparison .)
    LPAREN          reduce using rule 21 (equality -> equality EQUALS comparison .)
    $end            reduce using rule 21 (equality -> equality EQUALS comparison .)
    RPAREN          reduce using rule 21 (equality -> equality EQUALS comparison .)
    THEN            reduce using rule 21 (equality -> equality EQUALS comparison .)
    COMMA           reduce using rule 21 (equality -> equality EQUALS comparison .)
    RBRACE          reduce using rule 21 (equality -> equality EQUALS comparison .)
    GREATER         shift and go to state 38
    LESS            shift and go to state 39
    GREATEROREQUAL  shift and go to state 40
    LESSOREQUAL     shift and go to state 41


state 58

    (22) equality -> equality NOTEQUALS comparison .
    (24) comparison -> comparison . GREATER term
    (25) comparison -> comparison . LESS term
    (26) comparison -> comparison . GREATEROREQUAL term
    (27) comparison -> comparison . LESSOREQUAL term

    EQUALS          reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    NOTEQUALS       reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    OR              reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    AND             reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    VAR             reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    FUNC            reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    IF              reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    WHILE           reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    ID              reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    NOT             reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    NUMBER          reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    LPAREN          reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    $end            reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    RPAREN          reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    THEN            reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    COMMA           reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    RBRACE          reduce using rule 22 (equality -> equality NOTEQUALS comparison .)
    GREATER         shift and go to state 38
    LESS            shift and go to state 39
    GREATEROREQUAL  shift and go to state 40
    LESSOREQUAL     shift and go to state 41


state 59

    (24) comparison -> comparison GREATER term .
    (29) term -> term . PLUS factor
    (30) term -> term . MINUS factor

    GREATER         reduce using rule 24 (comparison -> comparison GREATER term .)
    LESS            reduce using rule 24 (comparison -> comparison GREATER term .)
    GREATEROREQUAL  reduce using rule 24 (comparison -> comparison GREATER term .)
    LESSOREQUAL     reduce using rule 24 (comparison -> comparison GREATER term .)
    EQUALS          reduce using rule 24 (comparison -> comparison GREATER term .)
    NOTEQUALS       reduce using rule 24 (comparison -> comparison GREATER term .)
    OR              reduce using rule 24 (comparison -> comparison GREATER term .)
    AND             reduce using rule 24 (comparison -> comparison GREATER term .)
    VAR             reduce using rule 24 (comparison -> comparison GREATER term .)
    FUNC            reduce using rule 24 (comparison -> comparison GREATER term .)
    IF              reduce using rule 24 (comparison -> comparison GREATER term .)
    WHILE           reduce using rule 24 (comparison -> comparison GREATER term .)
    ID              reduce using rule 24 (comparison -> comparison GREATER term .)
    NOT             reduce using rule 24 (comparison -> comparison GREATER term .)
    NUMBER          reduce using rule 24 (comparison -> comparison GREATER term .)
    LPAREN          reduce using rule 24 (comparison -> comparison GREATER term .)
    $end            reduce using rule 24 (comparison -> comparison GREATER term .)
    RPAREN          reduce using rule 24 (comparison -> comparison GREATER term .)
    THEN            reduce using rule 24 (comparison -> comparison GREATER term .)
    COMMA           reduce using rule 24 (comparison -> comparison GREATER term .)
    RBRACE          reduce using rule 24 (comparison -> comparison GREATER term .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43


state 60

    (25) comparison -> comparison LESS term .
    (29) term -> term . PLUS factor
    (30) term -> term . MINUS factor

    GREATER         reduce using rule 25 (comparison -> comparison LESS term .)
    LESS            reduce using rule 25 (comparison -> comparison LESS term .)
    GREATEROREQUAL  reduce using rule 25 (comparison -> comparison LESS term .)
    LESSOREQUAL     reduce using rule 25 (comparison -> comparison LESS term .)
    EQUALS          reduce using rule 25 (comparison -> comparison LESS term .)
    NOTEQUALS       reduce using rule 25 (comparison -> comparison LESS term .)
    OR              reduce using rule 25 (comparison -> comparison LESS term .)
    AND             reduce using rule 25 (comparison -> comparison LESS term .)
    VAR             reduce using rule 25 (comparison -> comparison LESS term .)
    FUNC            reduce using rule 25 (comparison -> comparison LESS term .)
    IF              reduce using rule 25 (comparison -> comparison LESS term .)
    WHILE           reduce using rule 25 (comparison -> comparison LESS term .)
    ID              reduce using rule 25 (comparison -> comparison LESS term .)
    NOT             reduce using rule 25 (comparison -> comparison LESS term .)
    NUMBER          reduce using rule 25 (comparison -> comparison LESS term .)
    LPAREN          reduce using rule 25 (comparison -> comparison LESS term .)
    $end            reduce using rule 25 (comparison -> comparison LESS term .)
    RPAREN          reduce using rule 25 (comparison -> comparison LESS term .)
    THEN            reduce using rule 25 (comparison -> comparison LESS term .)
    COMMA           reduce using rule 25 (comparison -> comparison LESS term .)
    RBRACE          reduce using rule 25 (comparison -> comparison LESS term .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43


state 61

    (26) comparison -> comparison GREATEROREQUAL term .
    (29) term -> term . PLUS factor
    (30) term -> term . MINUS factor

    GREATER         reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    LESS            reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    GREATEROREQUAL  reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    LESSOREQUAL     reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    EQUALS          reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    NOTEQUALS       reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    OR              reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    AND             reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    VAR             reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    FUNC            reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    IF              reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    WHILE           reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    ID              reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    NOT             reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    NUMBER          reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    LPAREN          reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    $end            reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    RPAREN          reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    THEN            reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    COMMA           reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    RBRACE          reduce using rule 26 (comparison -> comparison GREATEROREQUAL term .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43


state 62

    (27) comparison -> comparison LESSOREQUAL term .
    (29) term -> term . PLUS factor
    (30) term -> term . MINUS factor

    GREATER         reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    LESS            reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    GREATEROREQUAL  reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    LESSOREQUAL     reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    EQUALS          reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    NOTEQUALS       reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    OR              reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    AND             reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    VAR             reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    FUNC            reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    IF              reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    WHILE           reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    ID              reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    NOT             reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    NUMBER          reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    LPAREN          reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    $end            reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    RPAREN          reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    THEN            reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    COMMA           reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    RBRACE          reduce using rule 27 (comparison -> comparison LESSOREQUAL term .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43


state 63

    (29) term -> term PLUS factor .
    (32) factor -> factor . TIMES unary
    (33) factor -> factor . DIVIDE unary

    PLUS            reduce using rule 29 (term -> term PLUS factor .)
    MINUS           reduce using rule 29 (term -> term PLUS factor .)
    GREATER         reduce using rule 29 (term -> term PLUS factor .)
    LESS            reduce using rule 29 (term -> term PLUS factor .)
    GREATEROREQUAL  reduce using rule 29 (term -> term PLUS factor .)
    LESSOREQUAL     reduce using rule 29 (term -> term PLUS factor .)
    EQUALS          reduce using rule 29 (term -> term PLUS factor .)
    NOTEQUALS       reduce using rule 29 (term -> term PLUS factor .)
    OR              reduce using rule 29 (term -> term PLUS factor .)
    AND             reduce using rule 29 (term -> term PLUS factor .)
    VAR             reduce using rule 29 (term -> term PLUS factor .)
    FUNC            reduce using rule 29 (term -> term PLUS factor .)
    IF              reduce using rule 29 (term -> term PLUS factor .)
    WHILE           reduce using rule 29 (term -> term PLUS factor .)
    ID              reduce using rule 29 (term -> term PLUS factor .)
    NOT             reduce using rule 29 (term -> term PLUS factor .)
    NUMBER          reduce using rule 29 (term -> term PLUS factor .)
    LPAREN          reduce using rule 29 (term -> term PLUS factor .)
    $end            reduce using rule 29 (term -> term PLUS factor .)
    RPAREN          reduce using rule 29 (term -> term PLUS factor .)
    THEN            reduce using rule 29 (term -> term PLUS factor .)
    COMMA           reduce using rule 29 (term -> term PLUS factor .)
    RBRACE          reduce using rule 29 (term -> term PLUS factor .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45


state 64

    (30) term -> term MINUS factor .
    (32) factor -> factor . TIMES unary
    (33) factor -> factor . DIVIDE unary

    PLUS            reduce using rule 30 (term -> term MINUS factor .)
    MINUS           reduce using rule 30 (term -> term MINUS factor .)
    GREATER         reduce using rule 30 (term -> term MINUS factor .)
    LESS            reduce using rule 30 (term -> term MINUS factor .)
    GREATEROREQUAL  reduce using rule 30 (term -> term MINUS factor .)
    LESSOREQUAL     reduce using rule 30 (term -> term MINUS factor .)
    EQUALS          reduce using rule 30 (term -> term MINUS factor .)
    NOTEQUALS       reduce using rule 30 (term -> term MINUS factor .)
    OR              reduce using rule 30 (term -> term MINUS factor .)
    AND             reduce using rule 30 (term -> term MINUS factor .)
    VAR             reduce using rule 30 (term -> term MINUS factor .)
    FUNC            reduce using rule 30 (term -> term MINUS factor .)
    IF              reduce using rule 30 (term -> term MINUS factor .)
    WHILE           reduce using rule 30 (term -> term MINUS factor .)
    ID              reduce using rule 30 (term -> term MINUS factor .)
    NOT             reduce using rule 30 (term -> term MINUS factor .)
    NUMBER          reduce using rule 30 (term -> term MINUS factor .)
    LPAREN          reduce using rule 30 (term -> term MINUS factor .)
    $end            reduce using rule 30 (term -> term MINUS factor .)
    RPAREN          reduce using rule 30 (term -> term MINUS factor .)
    THEN            reduce using rule 30 (term -> term MINUS factor .)
    COMMA           reduce using rule 30 (term -> term MINUS factor .)
    RBRACE          reduce using rule 30 (term -> term MINUS factor .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45


state 65

    (32) factor -> factor TIMES unary .

    TIMES           reduce using rule 32 (factor -> factor TIMES unary .)
    DIVIDE          reduce using rule 32 (factor -> factor TIMES unary .)
    PLUS            reduce using rule 32 (factor -> factor TIMES unary .)
    MINUS           reduce using rule 32 (factor -> factor TIMES unary .)
    GREATER         reduce using rule 32 (factor -> factor TIMES unary .)
    LESS            reduce using rule 32 (factor -> factor TIMES unary .)
    GREATEROREQUAL  reduce using rule 32 (factor -> factor TIMES unary .)
    LESSOREQUAL     reduce using rule 32 (factor -> factor TIMES unary .)
    EQUALS          reduce using rule 32 (factor -> factor TIMES unary .)
    NOTEQUALS       reduce using rule 32 (factor -> factor TIMES unary .)
    OR              reduce using rule 32 (factor -> factor TIMES unary .)
    AND             reduce using rule 32 (factor -> factor TIMES unary .)
    VAR             reduce using rule 32 (factor -> factor TIMES unary .)
    FUNC            reduce using rule 32 (factor -> factor TIMES unary .)
    IF              reduce using rule 32 (factor -> factor TIMES unary .)
    WHILE           reduce using rule 32 (factor -> factor TIMES unary .)
    ID              reduce using rule 32 (factor -> factor TIMES unary .)
    NOT             reduce using rule 32 (factor -> factor TIMES unary .)
    NUMBER          reduce using rule 32 (factor -> factor TIMES unary .)
    LPAREN          reduce using rule 32 (factor -> factor TIMES unary .)
    $end            reduce using rule 32 (factor -> factor TIMES unary .)
    RPAREN          reduce using rule 32 (factor -> factor TIMES unary .)
    THEN            reduce using rule 32 (factor -> factor TIMES unary .)
    COMMA           reduce using rule 32 (factor -> factor TIMES unary .)
    RBRACE          reduce using rule 32 (factor -> factor TIMES unary .)


state 66

    (33) factor -> factor DIVIDE unary .

    TIMES           reduce using rule 33 (factor -> factor DIVIDE unary .)
    DIVIDE          reduce using rule 33 (factor -> factor DIVIDE unary .)
    PLUS            reduce using rule 33 (factor -> factor DIVIDE unary .)
    MINUS           reduce using rule 33 (factor -> factor DIVIDE unary .)
    GREATER         reduce using rule 33 (factor -> factor DIVIDE unary .)
    LESS            reduce using rule 33 (factor -> factor DIVIDE unary .)
    GREATEROREQUAL  reduce using rule 33 (factor -> factor DIVIDE unary .)
    LESSOREQUAL     reduce using rule 33 (factor -> factor DIVIDE unary .)
    EQUALS          reduce using rule 33 (factor -> factor DIVIDE unary .)
    NOTEQUALS       reduce using rule 33 (factor -> factor DIVIDE unary .)
    OR              reduce using rule 33 (factor -> factor DIVIDE unary .)
    AND             reduce using rule 33 (factor -> factor DIVIDE unary .)
    VAR             reduce using rule 33 (factor -> factor DIVIDE unary .)
    FUNC            reduce using rule 33 (factor -> factor DIVIDE unary .)
    IF              reduce using rule 33 (factor -> factor DIVIDE unary .)
    WHILE           reduce using rule 33 (factor -> factor DIVIDE unary .)
    ID              reduce using rule 33 (factor -> factor DIVIDE unary .)
    NOT             reduce using rule 33 (factor -> factor DIVIDE unary .)
    NUMBER          reduce using rule 33 (factor -> factor DIVIDE unary .)
    LPAREN          reduce using rule 33 (factor -> factor DIVIDE unary .)
    $end            reduce using rule 33 (factor -> factor DIVIDE unary .)
    RPAREN          reduce using rule 33 (factor -> factor DIVIDE unary .)
    THEN            reduce using rule 33 (factor -> factor DIVIDE unary .)
    COMMA           reduce using rule 33 (factor -> factor DIVIDE unary .)
    RBRACE          reduce using rule 33 (factor -> factor DIVIDE unary .)


state 67

    (37) call -> primary LPAREN arguments . RPAREN
    (42) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 74
    COMMA           shift and go to state 75


state 68

    (43) arguments -> expression .

    RPAREN          reduce using rule 43 (arguments -> expression .)
    COMMA           reduce using rule 43 (arguments -> expression .)


state 69

    (14) varDeclaration -> VAR ID ASSIGN expression .

    VAR             reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)
    FUNC            reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)
    IF              reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)
    WHILE           reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)
    ID              reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)
    NOT             reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)
    NUMBER          reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)
    LPAREN          reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)
    $end            reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)
    RBRACE          reduce using rule 14 (varDeclaration -> VAR ID ASSIGN expression .)


state 70

    (47) parameter_list -> ID .

    RPAREN          reduce using rule 47 (parameter_list -> ID .)
    COMMA           reduce using rule 47 (parameter_list -> ID .)


state 71

    (45) funcDeclaration -> FUNC ID LPAREN parameter_list . RPAREN LBRACE declaration_list RBRACE
    (46) parameter_list -> parameter_list . COMMA ID

    RPAREN          shift and go to state 76
    COMMA           shift and go to state 77


state 72

    (10) ifStatement -> IF expression THEN LBRACE . declaration_list RBRACE
    (11) ifStatement -> IF expression THEN LBRACE . declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 9
    declaration_list               shift and go to state 78
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 73

    (12) whileStatement -> WHILE expression THEN LBRACE . declaration_list RBRACE
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 9
    declaration_list               shift and go to state 79
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 74

    (37) call -> primary LPAREN arguments RPAREN .

    TIMES           reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    PLUS            reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    MINUS           reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    GREATER         reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    LESS            reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    GREATEROREQUAL  reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    LESSOREQUAL     reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    EQUALS          reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    NOTEQUALS       reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    OR              reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    AND             reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    VAR             reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    FUNC            reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    IF              reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    WHILE           reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    ID              reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    NOT             reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    NUMBER          reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    $end            reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    THEN            reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    COMMA           reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 37 (call -> primary LPAREN arguments RPAREN .)


state 75

    (42) arguments -> arguments COMMA . expression
    (15) expression -> . assignment
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 80
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 76

    (45) funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN . LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 81


state 77

    (46) parameter_list -> parameter_list COMMA . ID

    ID              shift and go to state 82


state 78

    (10) ifStatement -> IF expression THEN LBRACE declaration_list . RBRACE
    (11) ifStatement -> IF expression THEN LBRACE declaration_list . RBRACE ELSE LBRACE declaration_list RBRACE
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 83
    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 9
    declaration                    shift and go to state 27
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 79

    (12) whileStatement -> WHILE expression THEN LBRACE declaration_list . RBRACE
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 84
    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 9
    declaration                    shift and go to state 27
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 80

    (42) arguments -> arguments COMMA expression .

    RPAREN          reduce using rule 42 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 42 (arguments -> arguments COMMA expression .)


state 81

    (45) funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE . declaration_list RBRACE
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    declaration_list               shift and go to state 85
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    expression                     shift and go to state 9
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 82

    (46) parameter_list -> parameter_list COMMA ID .

    RPAREN          reduce using rule 46 (parameter_list -> parameter_list COMMA ID .)
    COMMA           reduce using rule 46 (parameter_list -> parameter_list COMMA ID .)


state 83

    (10) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .
    (11) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE . ELSE LBRACE declaration_list RBRACE

    VAR             reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    FUNC            reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    IF              reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    ID              reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    $end            reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 10 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE .)
    ELSE            shift and go to state 86


state 84

    (12) whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .

    VAR             reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    FUNC            reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    IF              reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    ID              reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    $end            reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 12 (whileStatement -> WHILE expression THEN LBRACE declaration_list RBRACE .)


state 85

    (45) funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list . RBRACE
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 87
    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    declaration                    shift and go to state 27
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    expression                     shift and go to state 9
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 86

    (11) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE . LBRACE declaration_list RBRACE

    LBRACE          shift and go to state 88


state 87

    (45) funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .

    VAR             reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    FUNC            reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    IF              reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    ID              reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    $end            reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 45 (funcDeclaration -> FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE .)


state 88

    (11) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE . declaration_list RBRACE
    (2) declaration_list -> . declaration
    (3) declaration_list -> . declaration_list declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 9
    declaration_list               shift and go to state 89
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 89

    (11) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list . RBRACE
    (3) declaration_list -> declaration_list . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . funcDeclaration
    (13) varDeclaration -> . VAR ID
    (14) varDeclaration -> . VAR ID ASSIGN expression
    (7) statement -> . expression
    (8) statement -> . ifStatement
    (9) statement -> . whileStatement
    (45) funcDeclaration -> . FUNC ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE
    (15) expression -> . assignment
    (10) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE
    (11) ifStatement -> . IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE
    (12) whileStatement -> . WHILE expression THEN LBRACE declaration_list RBRACE
    (16) assignment -> . ID ASSIGN assignment
    (17) assignment -> . logical
    (18) logical -> . logical OR equality
    (19) logical -> . logical AND equality
    (20) logical -> . equality
    (21) equality -> . equality EQUALS comparison
    (22) equality -> . equality NOTEQUALS comparison
    (23) equality -> . comparison
    (24) comparison -> . comparison GREATER term
    (25) comparison -> . comparison LESS term
    (26) comparison -> . comparison GREATEROREQUAL term
    (27) comparison -> . comparison LESSOREQUAL term
    (28) comparison -> . term
    (29) term -> . term PLUS factor
    (30) term -> . term MINUS factor
    (31) term -> . factor
    (32) factor -> . factor TIMES unary
    (33) factor -> . factor DIVIDE unary
    (34) factor -> . unary
    (35) unary -> . NOT unary
    (36) unary -> . call
    (37) call -> . primary LPAREN arguments RPAREN
    (38) call -> . primary
    (39) primary -> . NUMBER
    (40) primary -> . ID
    (41) primary -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 90
    VAR             shift and go to state 7
    FUNC            shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    ID              shift and go to state 8
    NOT             shift and go to state 23
    NUMBER          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 9
    declaration                    shift and go to state 27
    varDeclaration                 shift and go to state 4
    statement                      shift and go to state 5
    funcDeclaration                shift and go to state 6
    ifStatement                    shift and go to state 10
    whileStatement                 shift and go to state 11
    assignment                     shift and go to state 14
    logical                        shift and go to state 17
    equality                       shift and go to state 18
    comparison                     shift and go to state 19
    term                           shift and go to state 20
    factor                         shift and go to state 21
    unary                          shift and go to state 22
    call                           shift and go to state 24
    primary                        shift and go to state 25

state 90

    (11) ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .

    VAR             reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    FUNC            reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    IF              reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    ID              reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    NUMBER          reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    $end            reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 11 (ifStatement -> IF expression THEN LBRACE declaration_list RBRACE ELSE LBRACE declaration_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 25 resolved as shift
